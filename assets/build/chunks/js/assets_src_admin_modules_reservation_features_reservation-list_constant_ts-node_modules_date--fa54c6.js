"use strict";
(globalThis["webpackChunkwp_cafe"] = globalThis["webpackChunkwp_cafe"] || []).push([["assets_src_admin_modules_reservation_features_reservation-list_constant_ts-node_modules_date--fa54c6"],{

/***/ "./assets/src/admin/modules/reservation/features/reservation-list/constant.ts":
/*!************************************************************************************!*\
  !*** ./assets/src/admin/modules/reservation/features/reservation-list/constant.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReservationStatus: () => (/* binding */ ReservationStatus),
/* harmony export */   foodOrderOptions: () => (/* binding */ foodOrderOptions),
/* harmony export */   formatDateForDisplay: () => (/* binding */ formatDateForDisplay),
/* harmony export */   getGroupSelectionState: () => (/* binding */ getGroupSelectionState),
/* harmony export */   getMasterSelectionState: () => (/* binding */ getMasterSelectionState),
/* harmony export */   getRowKey: () => (/* binding */ getRowKey),
/* harmony export */   groupReservationsByDate: () => (/* binding */ groupReservationsByDate),
/* harmony export */   handleGroupSelection: () => (/* binding */ handleGroupSelection),
/* harmony export */   handleMasterSelection: () => (/* binding */ handleMasterSelection),
/* harmony export */   handleRowSelection: () => (/* binding */ handleRowSelection),
/* harmony export */   parseDateString: () => (/* binding */ parseDateString)
/* harmony export */ });
/* harmony import */ var _wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/i18n */ "@wordpress/i18n");
/* harmony import */ var _wordpress_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/format.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isValid.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/parse.js");
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/**
 * Wordpress Dependencies
 */

/**
 * Date utility functions for reservation list
 */

/**
 * Format date string for display
 * @param dateString - Date in DD-MM-YYYY format
 * @returns Formatted date string
 */
var formatDateForDisplay = function formatDateForDisplay(dateString) {
  try {
    // Handle DD-MM-YYYY format from API
    var parsedDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(dateString, "dd-MM-yyyy", new Date());
    if ((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.isValid)(parsedDate)) {
      return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.format)(parsedDate, "MMMM d, yyyy");
    }
    // Fallback: try other common date formats
    var isoDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(dateString, "yyyy-MM-dd", new Date());
    if ((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.isValid)(isoDate)) {
      return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.format)(isoDate, "MMMM d, yyyy");
    }
    return dateString;
  } catch (_a) {
    return dateString;
  }
};
/**
 * Group reservations by date and sort them
 * @param reservationList - Array of reservations
 * @returns Grouped and sorted reservations
 */
var groupReservationsByDate = function groupReservationsByDate(reservationList) {
  if (!reservationList || reservationList.length === 0) return [];
  var groups = {};
  reservationList.forEach(function (reservation) {
    var date = reservation.date;
    if (!groups[date]) {
      groups[date] = [];
    }
    groups[date].push(reservation);
  });
  // Convert to array and sort by date using date-fns
  return Object.entries(groups).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      date = _ref2[0],
      reservations = _ref2[1];
    return {
      date: date,
      reservations: reservations,
      count: reservations.length
    };
  }).sort(function (a, b) {
    // Sort by date (newest first)
    try {
      var dateA = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(a.date, "dd-MM-yyyy", new Date());
      var dateB = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(b.date, "dd-MM-yyyy", new Date());
      if ((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.isValid)(dateA) && (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.isValid)(dateB)) {
        return dateB.getTime() - dateA.getTime();
      }
      // Fallback: string comparison
      return b.date.localeCompare(a.date);
    } catch (_a) {
      return b.date.localeCompare(a.date);
    }
  });
};
/**
 * Generate a unique key for table rows
 * @param record - Reservation record
 * @param index - Row index
 * @returns Unique key string
 */
var getRowKey = function getRowKey(record, index) {
  var _a;
  return ((_a = record.id) === null || _a === void 0 ? void 0 : _a.toString()) || index.toString();
};
/**
 * Calculate selection state for a reservation group
 * @param group - Grouped reservation data
 * @param selectedRows - Array of selected row IDs
 * @returns Selection state information
 */
var getGroupSelectionState = function getGroupSelectionState(group, selectedRows) {
  var groupIds = group.reservations.map(function (r) {
    return r.id;
  });
  var selectedInGroup = groupIds.filter(function (id) {
    return selectedRows.includes(id);
  });
  var selectedCount = selectedInGroup.length;
  var totalCount = groupIds.length;
  var isAllSelected = totalCount > 0 && selectedCount === totalCount;
  return {
    selectedCount: selectedCount,
    isAllSelected: isAllSelected
  };
};
/**
 * Handle individual row selection
 * @param record - Reservation record
 * @param selected - Whether the row is selected
 * @param selectedRows - Current selected rows
 * @param onSelectionChange - Callback to update selection
 */
var handleRowSelection = function handleRowSelection(record, selected, selectedRows, onSelectionChange) {
  var currentKeys = selectedRows || [];
  var newSelectedKeys;
  if (selected) {
    newSelectedKeys = [].concat(_toConsumableArray(currentKeys), [record.id]);
  } else {
    newSelectedKeys = currentKeys.filter(function (k) {
      return k !== record.id;
    });
  }
  onSelectionChange(newSelectedKeys);
};
/**
 * Handle group selection (select/deselect all items in a group)
 * @param group - Grouped reservation data
 * @param selected - Whether the group should be selected
 * @param selectedRows - Current selected rows
 * @param onSelectionChange - Callback to update selection
 */
var handleGroupSelection = function handleGroupSelection(group, selected, selectedRows, onSelectionChange) {
  var groupIds = group.reservations.map(function (r) {
    return r.id;
  });
  var currentKeys = selectedRows || [];
  var newSelectedKeys;
  if (selected) {
    // Add all group IDs that aren't already selected
    var newIds = groupIds.filter(function (id) {
      return !currentKeys.includes(id);
    });
    newSelectedKeys = [].concat(_toConsumableArray(currentKeys), _toConsumableArray(newIds));
  } else {
    // Remove all group IDs
    newSelectedKeys = currentKeys.filter(function (id) {
      return !groupIds.includes(id);
    });
  }
  onSelectionChange(newSelectedKeys);
};
/**
 * Handle master selection (select/deselect all items)
 * @param checked - Whether all items should be selected
 * @param reservationList - All reservations
 * @param onSelectionChange - Callback to update selection
 */
var handleMasterSelection = function handleMasterSelection(checked, reservationList, onSelectionChange) {
  if (checked) {
    onSelectionChange(reservationList.map(function (r) {
      return r.id;
    }));
  } else {
    onSelectionChange([]);
  }
};
/**
 * Calculate master selection state
 * @param selectedRows - Current selected rows
 * @param reservationList - All reservations
 * @returns Whether master checkbox should be checked
 */
var getMasterSelectionState = function getMasterSelectionState(selectedRows, reservationList) {
  return selectedRows.length > 0 && selectedRows.length === reservationList.length;
};
var ReservationStatus = [{
  label: (0,_wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__.__)("Pending", "wpcafe"),
  value: "pending",
  color: "bg-yellow-500"
}, {
  label: (0,_wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__.__)("Confirmed", "wpcafe"),
  value: "confirmed",
  color: "bg-green-500"
}, {
  label: (0,_wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__.__)("Cancelled", "wpcafe"),
  value: "cancelled",
  color: "bg-red-500"
}];
var foodOrderOptions = [{
  value: "yes",
  label: (0,_wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__.__)("Yes", "wpcafe")
}, {
  value: "no",
  label: (0,_wordpress_i18n__WEBPACK_IMPORTED_MODULE_0__.__)("No", "wpcafe")
}];
// Helper function to safely parse date strings
var parseDateString = function parseDateString(dateStr) {
  var parsed = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(dateStr, "yyyy-MM-dd", new Date());
  return (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.isValid)(parsed) ? parsed : undefined;
};

/***/ }),

/***/ "./node_modules/date-fns/addDays.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/addDays.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDays: () => (/* binding */ addDays),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");



/**
 * The {@link addDays} function options.
 */

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be added.
 * @param options - An object with options
 *
 * @returns The new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays(date, amount, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, options?.in);
  if (isNaN(amount)) return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(options?.in || date, NaN);

  // If 0 days, no-op to avoid changing times in the hour before end of DST
  if (!amount) return _date;

  _date.setDate(_date.getDate() + amount);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addDays);


/***/ })

}]);
//# sourceMappingURL=assets_src_admin_modules_reservation_features_reservation-list_constant_ts-node_modules_date--fa54c6.js.map