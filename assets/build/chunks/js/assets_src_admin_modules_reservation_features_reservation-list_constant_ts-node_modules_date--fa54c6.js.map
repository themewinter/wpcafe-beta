{"version":3,"file":"chunks/js/assets_src_admin_modules_reservation_features_reservation-list_constant_ts-node_modules_date--fa54c6.js","mappings":"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","sources":["webpack://wp-cafe/./assets/src/admin/modules/reservation/features/reservation-list/constant.ts","webpack://wp-cafe/./node_modules/date-fns/addDays.js"],"sourcesContent":["/**\n * Wordpress Dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\n/**\n * Date utility functions for reservation list\n */\nimport { parse, format, isValid } from \"date-fns\";\n/**\n * Format date string for display\n * @param dateString - Date in DD-MM-YYYY format\n * @returns Formatted date string\n */\nexport const formatDateForDisplay = (dateString) => {\n    try {\n        // Handle DD-MM-YYYY format from API\n        const parsedDate = parse(dateString, \"dd-MM-yyyy\", new Date());\n        if (isValid(parsedDate)) {\n            return format(parsedDate, \"MMMM d, yyyy\");\n        }\n        // Fallback: try other common date formats\n        const isoDate = parse(dateString, \"yyyy-MM-dd\", new Date());\n        if (isValid(isoDate)) {\n            return format(isoDate, \"MMMM d, yyyy\");\n        }\n        return dateString;\n    }\n    catch (_a) {\n        return dateString;\n    }\n};\n/**\n * Group reservations by date and sort them\n * @param reservationList - Array of reservations\n * @returns Grouped and sorted reservations\n */\nexport const groupReservationsByDate = (reservationList) => {\n    if (!reservationList || reservationList.length === 0)\n        return [];\n    const groups = {};\n    reservationList.forEach((reservation) => {\n        const date = reservation.date;\n        if (!groups[date]) {\n            groups[date] = [];\n        }\n        groups[date].push(reservation);\n    });\n    // Convert to array and sort by date using date-fns\n    return Object.entries(groups)\n        .map(([date, reservations]) => ({\n        date,\n        reservations,\n        count: reservations.length,\n    }))\n        .sort((a, b) => {\n        // Sort by date (newest first)\n        try {\n            const dateA = parse(a.date, \"dd-MM-yyyy\", new Date());\n            const dateB = parse(b.date, \"dd-MM-yyyy\", new Date());\n            if (isValid(dateA) && isValid(dateB)) {\n                return dateB.getTime() - dateA.getTime();\n            }\n            // Fallback: string comparison\n            return b.date.localeCompare(a.date);\n        }\n        catch (_a) {\n            return b.date.localeCompare(a.date);\n        }\n    });\n};\n/**\n * Generate a unique key for table rows\n * @param record - Reservation record\n * @param index - Row index\n * @returns Unique key string\n */\nexport const getRowKey = (record, index) => {\n    var _a;\n    return ((_a = record.id) === null || _a === void 0 ? void 0 : _a.toString()) || index.toString();\n};\n/**\n * Calculate selection state for a reservation group\n * @param group - Grouped reservation data\n * @param selectedRows - Array of selected row IDs\n * @returns Selection state information\n */\nexport const getGroupSelectionState = (group, selectedRows) => {\n    const groupIds = group.reservations.map((r) => r.id);\n    const selectedInGroup = groupIds.filter((id) => selectedRows.includes(id));\n    const selectedCount = selectedInGroup.length;\n    const totalCount = groupIds.length;\n    const isAllSelected = totalCount > 0 && selectedCount === totalCount;\n    return { selectedCount, isAllSelected };\n};\n/**\n * Handle individual row selection\n * @param record - Reservation record\n * @param selected - Whether the row is selected\n * @param selectedRows - Current selected rows\n * @param onSelectionChange - Callback to update selection\n */\nexport const handleRowSelection = (record, selected, selectedRows, onSelectionChange) => {\n    const currentKeys = selectedRows || [];\n    let newSelectedKeys;\n    if (selected) {\n        newSelectedKeys = [...currentKeys, record.id];\n    }\n    else {\n        newSelectedKeys = currentKeys.filter((k) => k !== record.id);\n    }\n    onSelectionChange(newSelectedKeys);\n};\n/**\n * Handle group selection (select/deselect all items in a group)\n * @param group - Grouped reservation data\n * @param selected - Whether the group should be selected\n * @param selectedRows - Current selected rows\n * @param onSelectionChange - Callback to update selection\n */\nexport const handleGroupSelection = (group, selected, selectedRows, onSelectionChange) => {\n    const groupIds = group.reservations.map((r) => r.id);\n    const currentKeys = selectedRows || [];\n    let newSelectedKeys;\n    if (selected) {\n        // Add all group IDs that aren't already selected\n        const newIds = groupIds.filter((id) => !currentKeys.includes(id));\n        newSelectedKeys = [...currentKeys, ...newIds];\n    }\n    else {\n        // Remove all group IDs\n        newSelectedKeys = currentKeys.filter((id) => !groupIds.includes(id));\n    }\n    onSelectionChange(newSelectedKeys);\n};\n/**\n * Handle master selection (select/deselect all items)\n * @param checked - Whether all items should be selected\n * @param reservationList - All reservations\n * @param onSelectionChange - Callback to update selection\n */\nexport const handleMasterSelection = (checked, reservationList, onSelectionChange) => {\n    if (checked) {\n        onSelectionChange(reservationList.map((r) => r.id));\n    }\n    else {\n        onSelectionChange([]);\n    }\n};\n/**\n * Calculate master selection state\n * @param selectedRows - Current selected rows\n * @param reservationList - All reservations\n * @returns Whether master checkbox should be checked\n */\nexport const getMasterSelectionState = (selectedRows, reservationList) => {\n    return (selectedRows.length > 0 &&\n        selectedRows.length === reservationList.length);\n};\nexport const ReservationStatus = [\n    {\n        label: __(\"Pending\", \"wpcafe\"),\n        value: \"pending\",\n        color: \"bg-yellow-500\",\n    },\n    {\n        label: __(\"Confirmed\", \"wpcafe\"),\n        value: \"confirmed\",\n        color: \"bg-green-500\",\n    },\n    {\n        label: __(\"Cancelled\", \"wpcafe\"),\n        value: \"cancelled\",\n        color: \"bg-red-500\",\n    },\n];\nexport const foodOrderOptions = [\n    { value: \"yes\", label: __(\"Yes\", \"wpcafe\") },\n    { value: \"no\", label: __(\"No\", \"wpcafe\") },\n];\n// Helper function to safely parse date strings\nexport const parseDateString = (dateStr) => {\n    const parsed = parse(dateStr, \"yyyy-MM-dd\", new Date());\n    return isValid(parsed) ? parsed : undefined;\n};\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n"],"names":["__","parse","format","isValid","formatDateForDisplay","dateString","parsedDate","Date","isoDate","_a","groupReservationsByDate","reservationList","length","groups","forEach","reservation","date","push","Object","entries","map","_ref","_ref2","_slicedToArray","reservations","count","sort","a","b","dateA","dateB","getTime","localeCompare","getRowKey","record","index","id","toString","getGroupSelectionState","group","selectedRows","groupIds","r","selectedInGroup","filter","includes","selectedCount","totalCount","isAllSelected","handleRowSelection","selected","onSelectionChange","currentKeys","newSelectedKeys","concat","_toConsumableArray","k","handleGroupSelection","newIds","handleMasterSelection","checked","getMasterSelectionState","ReservationStatus","label","value","color","foodOrderOptions","parseDateString","dateStr","parsed","undefined"],"sourceRoot":""}