"use strict";
(globalThis["webpackChunkwp_cafe"] = globalThis["webpackChunkwp_cafe"] || []).push([["vendors-node_modules_lucide-react_dist_esm_icons_calendar_js-node_modules_lucide-react_dist_e-4dbed2"],{

/***/ "./node_modules/@date-fns/tz/constants/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@date-fns/tz/constants/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   constructFromSymbol: () => (/* binding */ constructFromSymbol)
/* harmony export */ });
/**
 * The symbol to access the `TZDate`'s function to construct a new instance from
 * the provided value. It helps date-fns to inherit the time zone.
 */
const constructFromSymbol = Symbol.for("constructDateFrom");

/***/ }),

/***/ "./node_modules/@date-fns/tz/date/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@date-fns/tz/date/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TZDate: () => (/* binding */ TZDate)
/* harmony export */ });
/* harmony import */ var _tzName_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tzName/index.js */ "./node_modules/@date-fns/tz/tzName/index.js");
/* harmony import */ var _mini_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mini.js */ "./node_modules/@date-fns/tz/date/mini.js");



/**
 * UTC date class. It maps getters and setters to corresponding UTC methods,
 * forcing all calculations in the UTC time zone.
 *
 * Combined with date-fns, it allows using the class the same way as
 * the original date class.
 *
 * This complete version provides not only getters, setters,
 * and `getTimezoneOffset`, but also the formatter functions, mirroring
 * all original `Date` functionality. Use this version when you need to format
 * a string or in an environment you don't fully control (a library).
 * For a minimal version, see `UTCDateMini`.
 */
class TZDate extends _mini_js__WEBPACK_IMPORTED_MODULE_1__.TZDateMini {
  //#region static

  static tz(tz, ...args) {
    return args.length ? new TZDate(...args, tz) : new TZDate(Date.now(), tz);
  }

  //#endregion

  //#region representation

  toISOString() {
    const [sign, hours, minutes] = this.tzComponents();
    const tz = `${sign}${hours}:${minutes}`;
    return this.internal.toISOString().slice(0, -1) + tz;
  }
  toString() {
    // "Tue Aug 13 2024 07:50:19 GMT+0800 (Singapore Standard Time)";
    return `${this.toDateString()} ${this.toTimeString()}`;
  }
  toDateString() {
    // toUTCString returns RFC 7231 ("Mon, 12 Aug 2024 23:36:08 GMT")
    const [day, date, month, year] = this.internal.toUTCString().split(" ");
    // "Tue Aug 13 2024"
    return `${day?.slice(0, -1) /* Remove "," */} ${month} ${date} ${year}`;
  }
  toTimeString() {
    // toUTCString returns RFC 7231 ("Mon, 12 Aug 2024 23:36:08 GMT")
    const time = this.internal.toUTCString().split(" ")[4];
    const [sign, hours, minutes] = this.tzComponents();
    // "07:42:23 GMT+0800 (Singapore Standard Time)"
    return `${time} GMT${sign}${hours}${minutes} (${(0,_tzName_index_js__WEBPACK_IMPORTED_MODULE_0__.tzName)(this.timeZone, this)})`;
  }
  toLocaleString(locales, options) {
    return Date.prototype.toLocaleString.call(this, locales, {
      ...options,
      timeZone: options?.timeZone || this.timeZone
    });
  }
  toLocaleDateString(locales, options) {
    return Date.prototype.toLocaleDateString.call(this, locales, {
      ...options,
      timeZone: options?.timeZone || this.timeZone
    });
  }
  toLocaleTimeString(locales, options) {
    return Date.prototype.toLocaleTimeString.call(this, locales, {
      ...options,
      timeZone: options?.timeZone || this.timeZone
    });
  }

  //#endregion

  //#region private

  tzComponents() {
    const offset = this.getTimezoneOffset();
    const sign = offset > 0 ? "-" : "+";
    const hours = String(Math.floor(Math.abs(offset) / 60)).padStart(2, "0");
    const minutes = String(Math.abs(offset) % 60).padStart(2, "0");
    return [sign, hours, minutes];
  }

  //#endregion

  withTimeZone(timeZone) {
    return new TZDate(+this, timeZone);
  }

  //#region date-fns integration

  [Symbol.for("constructDateFrom")](date) {
    return new TZDate(+new Date(date), this.timeZone);
  }

  //#endregion
}

/***/ }),

/***/ "./node_modules/@date-fns/tz/date/mini.js":
/*!************************************************!*\
  !*** ./node_modules/@date-fns/tz/date/mini.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TZDateMini: () => (/* binding */ TZDateMini)
/* harmony export */ });
/* harmony import */ var _tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tzOffset/index.js */ "./node_modules/@date-fns/tz/tzOffset/index.js");

class TZDateMini extends Date {
  //#region static

  constructor(...args) {
    super();
    if (args.length > 1 && typeof args[args.length - 1] === "string") {
      this.timeZone = args.pop();
    }
    this.internal = new Date();
    if (isNaN((0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(this.timeZone, this))) {
      this.setTime(NaN);
    } else {
      if (!args.length) {
        this.setTime(Date.now());
      } else if (typeof args[0] === "number" && (args.length === 1 || args.length === 2 && typeof args[1] !== "number")) {
        this.setTime(args[0]);
      } else if (typeof args[0] === "string") {
        this.setTime(+new Date(args[0]));
      } else if (args[0] instanceof Date) {
        this.setTime(+args[0]);
      } else {
        this.setTime(+new Date(...args));
        adjustToSystemTZ(this, NaN);
        syncToInternal(this);
      }
    }
  }
  static tz(tz, ...args) {
    return args.length ? new TZDateMini(...args, tz) : new TZDateMini(Date.now(), tz);
  }

  //#endregion

  //#region time zone

  withTimeZone(timeZone) {
    return new TZDateMini(+this, timeZone);
  }
  getTimezoneOffset() {
    return -(0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(this.timeZone, this);
  }

  //#endregion

  //#region time

  setTime(time) {
    Date.prototype.setTime.apply(this, arguments);
    syncToInternal(this);
    return +this;
  }

  //#endregion

  //#region date-fns integration

  [Symbol.for("constructDateFrom")](date) {
    return new TZDateMini(+new Date(date), this.timeZone);
  }

  //#endregion
}

// Assign getters and setters
const re = /^(get|set)(?!UTC)/;
Object.getOwnPropertyNames(Date.prototype).forEach(method => {
  if (!re.test(method)) return;
  const utcMethod = method.replace(re, "$1UTC");
  // Filter out methods without UTC counterparts
  if (!TZDateMini.prototype[utcMethod]) return;
  if (method.startsWith("get")) {
    // Delegate to internal date's UTC method
    TZDateMini.prototype[method] = function () {
      return this.internal[utcMethod]();
    };
  } else {
    // Assign regular setter
    TZDateMini.prototype[method] = function () {
      Date.prototype[utcMethod].apply(this.internal, arguments);
      syncFromInternal(this);
      return +this;
    };

    // Assign UTC setter
    TZDateMini.prototype[utcMethod] = function () {
      Date.prototype[utcMethod].apply(this, arguments);
      syncToInternal(this);
      return +this;
    };
  }
});

/**
 * Function syncs time to internal date, applying the time zone offset.
 *
 * @param {Date} date - Date to sync
 */
function syncToInternal(date) {
  date.internal.setTime(+date);
  date.internal.setUTCMinutes(date.internal.getUTCMinutes() - date.getTimezoneOffset());
}

/**
 * Function syncs the internal date UTC values to the date. It allows to get
 * accurate timestamp value.
 *
 * @param {Date} date - The date to sync
 */
function syncFromInternal(date) {
  // First we transpose the internal values
  Date.prototype.setFullYear.call(date, date.internal.getUTCFullYear(), date.internal.getUTCMonth(), date.internal.getUTCDate());
  Date.prototype.setHours.call(date, date.internal.getUTCHours(), date.internal.getUTCMinutes(), date.internal.getUTCSeconds(), date.internal.getUTCMilliseconds());

  // Now we have to adjust the date to the system time zone
  adjustToSystemTZ(date);
}

/**
 * Function adjusts the date to the system time zone. It uses the time zone
 * differences to calculate the offset and adjust the date.
 *
 * @param {Date} date - Date to adjust
 */
function adjustToSystemTZ(date) {
  // Save the time zone offset before all the adjustments
  const offset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(date.timeZone, date);

  //#region System DST adjustment

  // The biggest problem with using the system time zone is that when we create
  // a date from internal values stored in UTC, the system time zone might end
  // up on the DST hour:
  //
  //   $ TZ=America/New_York node
  //   > new Date(2020, 2, 8, 1).toString()
  //   'Sun Mar 08 2020 01:00:00 GMT-0500 (Eastern Standard Time)'
  //   > new Date(2020, 2, 8, 2).toString()
  //   'Sun Mar 08 2020 03:00:00 GMT-0400 (Eastern Daylight Time)'
  //   > new Date(2020, 2, 8, 3).toString()
  //   'Sun Mar 08 2020 03:00:00 GMT-0400 (Eastern Daylight Time)'
  //   > new Date(2020, 2, 8, 4).toString()
  //   'Sun Mar 08 2020 04:00:00 GMT-0400 (Eastern Daylight Time)'
  //
  // Here we get the same hour for both 2 and 3, because the system time zone
  // has DST beginning at 8 March 2020, 2 a.m. and jumps to 3 a.m. So we have
  // to adjust the internal date to reflect that.
  //
  // However we want to adjust only if that's the DST hour the change happenes,
  // not the hour where DST moves to.

  // We calculate the previous hour to see if the time zone offset has changed
  // and we have landed on the DST hour.
  const prevHour = new Date(+date);
  // We use UTC methods here as we don't want to land on the same hour again
  // in case of DST.
  prevHour.setUTCHours(prevHour.getUTCHours() - 1);

  // Calculate if we are on the system DST hour.
  const systemOffset = -new Date(+date).getTimezoneOffset();
  const prevHourSystemOffset = -new Date(+prevHour).getTimezoneOffset();
  const systemDSTChange = systemOffset - prevHourSystemOffset;
  // Detect the DST shift. System DST change will occur both on
  const dstShift = Date.prototype.getHours.apply(date) !== date.internal.getUTCHours();

  // Move the internal date when we are on the system DST hour.
  if (systemDSTChange && dstShift) date.internal.setUTCMinutes(date.internal.getUTCMinutes() + systemDSTChange);

  //#endregion

  //#region System diff adjustment

  // Now we need to adjust the date, since we just applied internal values.
  // We need to calculate the difference between the system and date time zones
  // and apply it to the date.

  const offsetDiff = systemOffset - offset;
  if (offsetDiff) Date.prototype.setUTCMinutes.call(date, Date.prototype.getUTCMinutes.call(date) + offsetDiff);

  //#endregion

  //#region Post-adjustment DST fix

  const postOffset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(date.timeZone, date);
  const postSystemOffset = -new Date(+date).getTimezoneOffset();
  const postOffsetDiff = postSystemOffset - postOffset;
  const offsetChanged = postOffset !== offset;
  const postDiff = postOffsetDiff - offsetDiff;
  if (offsetChanged && postDiff) {
    Date.prototype.setUTCMinutes.call(date, Date.prototype.getUTCMinutes.call(date) + postDiff);

    // Now we need to check if got offset change during the post-adjustment.
    // If so, we also need both dates to reflect that.

    const newOffset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(date.timeZone, date);
    const offsetChange = postOffset - newOffset;
    if (offsetChange) {
      date.internal.setUTCMinutes(date.internal.getUTCMinutes() + offsetChange);
      Date.prototype.setUTCMinutes.call(date, Date.prototype.getUTCMinutes.call(date) + offsetChange);
    }
  }

  //#endregion
}

/***/ }),

/***/ "./node_modules/@date-fns/tz/index.js":
/*!********************************************!*\
  !*** ./node_modules/@date-fns/tz/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TZDate: () => (/* reexport safe */ _date_index_js__WEBPACK_IMPORTED_MODULE_1__.TZDate),
/* harmony export */   TZDateMini: () => (/* reexport safe */ _date_mini_js__WEBPACK_IMPORTED_MODULE_2__.TZDateMini),
/* harmony export */   constructFromSymbol: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol),
/* harmony export */   tz: () => (/* reexport safe */ _tz_index_js__WEBPACK_IMPORTED_MODULE_3__.tz),
/* harmony export */   tzName: () => (/* reexport safe */ _tzName_index_js__WEBPACK_IMPORTED_MODULE_6__.tzName),
/* harmony export */   tzOffset: () => (/* reexport safe */ _tzOffset_index_js__WEBPACK_IMPORTED_MODULE_4__.tzOffset),
/* harmony export */   tzScan: () => (/* reexport safe */ _tzScan_index_js__WEBPACK_IMPORTED_MODULE_5__.tzScan)
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants/index.js */ "./node_modules/@date-fns/tz/constants/index.js");
/* harmony import */ var _date_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./date/index.js */ "./node_modules/@date-fns/tz/date/index.js");
/* harmony import */ var _date_mini_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./date/mini.js */ "./node_modules/@date-fns/tz/date/mini.js");
/* harmony import */ var _tz_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tz/index.js */ "./node_modules/@date-fns/tz/tz/index.js");
/* harmony import */ var _tzOffset_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tzOffset/index.js */ "./node_modules/@date-fns/tz/tzOffset/index.js");
/* harmony import */ var _tzScan_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tzScan/index.js */ "./node_modules/@date-fns/tz/tzScan/index.js");
/* harmony import */ var _tzName_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tzName/index.js */ "./node_modules/@date-fns/tz/tzName/index.js");








/***/ }),

/***/ "./node_modules/@date-fns/tz/tz/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@date-fns/tz/tz/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tz: () => (/* binding */ tz)
/* harmony export */ });
/* harmony import */ var _date_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../date/index.js */ "./node_modules/@date-fns/tz/date/index.js");


/**
 * The function creates accepts a time zone and returns a function that creates
 * a new `TZDate` instance in the time zone from the provided value. Use it to
 * provide the context for the date-fns functions, via the `in` option.
 *
 * @param timeZone - Time zone name (IANA or UTC offset)
 *
 * @returns Function that creates a new `TZDate` instance in the time zone
 */
const tz = timeZone => value => _date_index_js__WEBPACK_IMPORTED_MODULE_0__.TZDate.tz(timeZone, +new Date(value));

/***/ }),

/***/ "./node_modules/@date-fns/tz/tzName/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@date-fns/tz/tzName/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tzName: () => (/* binding */ tzName)
/* harmony export */ });
/**
 * Time zone name format.
 */

/**
 * The function returns the time zone name for the given date in the specified
 * time zone.
 *
 * It uses the `Intl.DateTimeFormat` API and by default outputs the time zone
 * name in a long format, e.g. "Pacific Standard Time" or
 * "Singapore Standard Time".
 *
 * It is possible to specify the format as the third argument using one of the following options
 *
 * - "short": e.g. "EDT" or "GMT+8".
 * - "long": e.g. "Eastern Daylight Time".
 * - "shortGeneric": e.g. "ET" or "Singapore Time".
 * - "longGeneric": e.g. "Eastern Time" or "Singapore Standard Time".
 *
 * These options correspond to TR35 tokens `z..zzz`, `zzzz`, `v`, and `vvvv` respectively: https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-zone
 *
 * @param timeZone - Time zone name (IANA or UTC offset)
 * @param date - Date object to get the time zone name for
 * @param format - Optional format of the time zone name. Defaults to "long". Can be "short", "long", "shortGeneric", or "longGeneric".
 *
 * @returns Time zone name (e.g. "Singapore Standard Time")
 */
function tzName(timeZone, date, format = "long") {
  return new Intl.DateTimeFormat("en-US", {
    // Enforces engine to render the time. Without the option JavaScriptCore omits it.
    hour: "numeric",
    timeZone: timeZone,
    timeZoneName: format
  }).format(date).split(/\s/g) // Format.JS uses non-breaking spaces
  .slice(2) // Skip the hour and AM/PM parts
  .join(" ");
}

/***/ }),

/***/ "./node_modules/@date-fns/tz/tzOffset/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@date-fns/tz/tzOffset/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tzOffset: () => (/* binding */ tzOffset)
/* harmony export */ });
const offsetFormatCache = {};
const offsetCache = {};

/**
 * The function extracts UTC offset in minutes from the given date in specified
 * time zone.
 *
 * Unlike `Date.prototype.getTimezoneOffset`, this function returns the value
 * mirrored to the sign of the offset in the time zone. For Asia/Singapore
 * (UTC+8), `tzOffset` returns 480, while `getTimezoneOffset` returns -480.
 *
 * @param timeZone - Time zone name (IANA or UTC offset)
 * @param date - Date to check the offset for
 *
 * @returns UTC offset in minutes
 */
function tzOffset(timeZone, date) {
  try {
    const format = offsetFormatCache[timeZone] ||= new Intl.DateTimeFormat("en-US", {
      timeZone,
      timeZoneName: "longOffset"
    }).format;
    const offsetStr = format(date).split("GMT")[1];
    if (offsetStr in offsetCache) return offsetCache[offsetStr];
    return calcOffset(offsetStr, offsetStr.split(":"));
  } catch {
    // Fallback to manual parsing if the runtime doesn't support ±HH:MM/±HHMM/±HH
    // See: https://github.com/nodejs/node/issues/53419
    if (timeZone in offsetCache) return offsetCache[timeZone];
    const captures = timeZone?.match(offsetRe);
    if (captures) return calcOffset(timeZone, captures.slice(1));
    return NaN;
  }
}
const offsetRe = /([+-]\d\d):?(\d\d)?/;
function calcOffset(cacheStr, values) {
  const hours = +(values[0] || 0);
  const minutes = +(values[1] || 0);
  return offsetCache[cacheStr] = hours > 0 ? hours * 60 + minutes : hours * 60 - minutes;
}

/***/ }),

/***/ "./node_modules/@date-fns/tz/tzScan/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@date-fns/tz/tzScan/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tzScan: () => (/* binding */ tzScan)
/* harmony export */ });
/* harmony import */ var _tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tzOffset/index.js */ "./node_modules/@date-fns/tz/tzOffset/index.js");


/**
 * Time interval.
 */

/**
 * Time zone change record.
 */

/**
 * The function scans the time zone for changes in the given interval.
 *
 * @param timeZone - Time zone name (IANA or UTC offset)
 * @param interval - Time interval to scan for changes
 *
 * @returns Array of time zone changes
 */
function tzScan(timeZone, interval) {
  const changes = [];
  const monthDate = new Date(interval.start);
  monthDate.setUTCSeconds(0, 0);
  const endDate = new Date(interval.end);
  endDate.setUTCSeconds(0, 0);
  const endMonthTime = +endDate;
  let lastOffset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(timeZone, monthDate);
  while (+monthDate < endMonthTime) {
    // Month forward
    monthDate.setUTCMonth(monthDate.getUTCMonth() + 1);

    // Find the month where the offset changes
    const offset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(timeZone, monthDate);
    if (offset != lastOffset) {
      // Rewind a month back to find the day where the offset changes
      const dayDate = new Date(monthDate);
      dayDate.setUTCMonth(dayDate.getUTCMonth() - 1);
      const endDayTime = +monthDate;
      lastOffset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(timeZone, dayDate);
      while (+dayDate < endDayTime) {
        // Day forward
        dayDate.setUTCDate(dayDate.getUTCDate() + 1);

        // Find the day where the offset changes
        const offset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(timeZone, dayDate);
        if (offset != lastOffset) {
          // Rewind a day back to find the time where the offset changes
          const hourDate = new Date(dayDate);
          hourDate.setUTCDate(hourDate.getUTCDate() - 1);
          const endHourTime = +dayDate;
          lastOffset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(timeZone, hourDate);
          while (+hourDate < endHourTime) {
            // Hour forward
            hourDate.setUTCHours(hourDate.getUTCHours() + 1);

            // Find the hour where the offset changes
            const hourOffset = (0,_tzOffset_index_js__WEBPACK_IMPORTED_MODULE_0__.tzOffset)(timeZone, hourDate);
            if (hourOffset !== lastOffset) {
              changes.push({
                date: new Date(hourDate),
                change: hourOffset - lastOffset,
                offset: hourOffset
              });
            }
            lastOffset = hourOffset;
          }
        }
        lastOffset = offset;
      }
    }
    lastOffset = offset;
  }
  return changes;
}

/***/ }),

/***/ "./node_modules/@radix-ui/react-popover/dist/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@radix-ui/react-popover/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Anchor: () => (/* binding */ Anchor2),
/* harmony export */   Arrow: () => (/* binding */ Arrow2),
/* harmony export */   Close: () => (/* binding */ Close),
/* harmony export */   Content: () => (/* binding */ Content2),
/* harmony export */   Popover: () => (/* binding */ Popover),
/* harmony export */   PopoverAnchor: () => (/* binding */ PopoverAnchor),
/* harmony export */   PopoverArrow: () => (/* binding */ PopoverArrow),
/* harmony export */   PopoverClose: () => (/* binding */ PopoverClose),
/* harmony export */   PopoverContent: () => (/* binding */ PopoverContent),
/* harmony export */   PopoverPortal: () => (/* binding */ PopoverPortal),
/* harmony export */   PopoverTrigger: () => (/* binding */ PopoverTrigger),
/* harmony export */   Portal: () => (/* binding */ Portal),
/* harmony export */   Root: () => (/* binding */ Root2),
/* harmony export */   Trigger: () => (/* binding */ Trigger),
/* harmony export */   createPopoverScope: () => (/* binding */ createPopoverScope)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/primitive */ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/primitive/dist/index.mjs");
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ "./node_modules/@radix-ui/react-compose-refs/dist/index.mjs");
/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-context */ "./node_modules/@radix-ui/react-context/dist/index.mjs");
/* harmony import */ var _radix_ui_react_dismissable_layer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-dismissable-layer */ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs");
/* harmony import */ var _radix_ui_react_focus_guards__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-focus-guards */ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-focus-guards/dist/index.mjs");
/* harmony import */ var _radix_ui_react_focus_scope__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/react-focus-scope */ "./node_modules/@radix-ui/react-focus-scope/dist/index.mjs");
/* harmony import */ var _radix_ui_react_id__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-id */ "./node_modules/@radix-ui/react-id/dist/index.mjs");
/* harmony import */ var _radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @radix-ui/react-popper */ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-popper/dist/index.mjs");
/* harmony import */ var _radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @radix-ui/react-portal */ "./node_modules/@radix-ui/react-portal/dist/index.mjs");
/* harmony import */ var _radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @radix-ui/react-presence */ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-presence/dist/index.mjs");
/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @radix-ui/react-primitive */ "./node_modules/@radix-ui/react-primitive/dist/index.mjs");
/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @radix-ui/react-slot */ "./node_modules/@radix-ui/react-slot/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @radix-ui/react-use-controllable-state */ "./node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs");
/* harmony import */ var aria_hidden__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! aria-hidden */ "./node_modules/aria-hidden/dist/es2015/index.js");
/* harmony import */ var react_remove_scroll__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! react-remove-scroll */ "./node_modules/react-remove-scroll/dist/es2015/Combination.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
"use client";

// src/popover.tsx


















var POPOVER_NAME = "Popover";
var [createPopoverContext, createPopoverScope] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_3__.createContextScope)(POPOVER_NAME, [
  _radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.createPopperScope
]);
var usePopperScope = (0,_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.createPopperScope)();
var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
var Popover = (props) => {
  const {
    __scopePopover,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = false
  } = props;
  const popperScope = usePopperScope(__scopePopover);
  const triggerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);
  const [open, setOpen] = (0,_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_13__.useControllableState)({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: POPOVER_NAME
  });
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.Root, { ...popperScope, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
    PopoverProvider,
    {
      scope: __scopePopover,
      contentId: (0,_radix_ui_react_id__WEBPACK_IMPORTED_MODULE_7__.useId)(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      hasCustomAnchor,
      onCustomAnchorAdd: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => setHasCustomAnchor(true), []),
      onCustomAnchorRemove: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => setHasCustomAnchor(false), []),
      modal,
      children
    }
  ) });
};
Popover.displayName = POPOVER_NAME;
var ANCHOR_NAME = "PopoverAnchor";
var PopoverAnchor = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [onCustomAnchorAdd, onCustomAnchorRemove]);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
PopoverAnchor.displayName = ANCHOR_NAME;
var TRIGGER_NAME = "PopoverTrigger";
var PopoverTrigger = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    const composedTriggerRef = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__.useComposedRefs)(forwardedRef, context.triggerRef);
    const trigger = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
      _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_11__.Primitive.button,
      {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(props.onClick, context.onOpenToggle)
      }
    );
    return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.Anchor, { asChild: true, ...popperScope, children: trigger });
  }
);
PopoverTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "PopoverPortal";
var [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {
  forceMount: void 0
});
var PopoverPortal = (props) => {
  const { __scopePopover, forceMount, children, container } = props;
  const context = usePopoverContext(PORTAL_NAME, __scopePopover);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(PortalProvider, { scope: __scopePopover, forceMount, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_10__.Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_9__.Portal, { asChild: true, container, children }) }) });
};
PopoverPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "PopoverContent";
var PopoverContent = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_10__.Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
  }
);
PopoverContent.displayName = CONTENT_NAME;
var Slot = (0,_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_12__.createSlot)("PopoverContent.RemoveScroll");
var PopoverContentModal = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const contentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__.useComposedRefs)(forwardedRef, contentRef);
    const isRightClickOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
      const content = contentRef.current;
      if (content) return (0,aria_hidden__WEBPACK_IMPORTED_MODULE_14__.hideOthers)(content);
    }, []);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(react_remove_scroll__WEBPACK_IMPORTED_MODULE_15__["default"], { as: Slot, allowPinchZoom: true, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(props.onCloseAutoFocus, (event) => {
          event.preventDefault();
          if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();
        }),
        onPointerDownOutside: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(
          props.onPointerDownOutside,
          (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            isRightClickOutsideRef.current = isRightClick;
          },
          { checkForDefaultPrevented: false }
        ),
        onFocusOutside: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(
          props.onFocusOutside,
          (event) => event.preventDefault(),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
var PopoverContentNonModal = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    const hasPointerDownOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event) => {
          props.onCloseAutoFocus?.(event);
          if (!event.defaultPrevented) {
            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
          hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          props.onInteractOutside?.(event);
          if (!event.defaultPrevented) {
            hasInteractedOutsideRef.current = true;
            if (event.detail.originalEvent.type === "pointerdown") {
              hasPointerDownOutsideRef.current = true;
            }
          }
          const target = event.target;
          const targetIsTrigger = context.triggerRef.current?.contains(target);
          if (targetIsTrigger) event.preventDefault();
          if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
            event.preventDefault();
          }
        }
      }
    );
  }
);
var PopoverContentImpl = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopePopover,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      ...contentProps
    } = props;
    const context = usePopoverContext(CONTENT_NAME, __scopePopover);
    const popperScope = usePopperScope(__scopePopover);
    (0,_radix_ui_react_focus_guards__WEBPACK_IMPORTED_MODULE_5__.useFocusGuards)();
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
      _radix_ui_react_focus_scope__WEBPACK_IMPORTED_MODULE_6__.FocusScope,
      {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
          _radix_ui_react_dismissable_layer__WEBPACK_IMPORTED_MODULE_4__.DismissableLayer,
          {
            asChild: true,
            disableOutsidePointerEvents,
            onInteractOutside,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside,
            onDismiss: () => context.onOpenChange(false),
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
              _radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.Content,
              {
                "data-state": getState(context.open),
                role: "dialog",
                id: context.contentId,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                  ...contentProps.style,
                  // re-namespace exposed content custom properties
                  ...{
                    "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                  }
                }
              }
            )
          }
        )
      }
    );
  }
);
var CLOSE_NAME = "PopoverClose";
var PopoverClose = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(
      _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_11__.Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(props.onClick, () => context.onOpenChange(false))
      }
    );
  }
);
PopoverClose.displayName = CLOSE_NAME;
var ARROW_NAME = "PopoverArrow";
var PopoverArrow = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopePopover);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__.jsx)(_radix_ui_react_popper__WEBPACK_IMPORTED_MODULE_8__.Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
PopoverArrow.displayName = ARROW_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
var Root2 = Popover;
var Anchor2 = PopoverAnchor;
var Trigger = PopoverTrigger;
var Portal = PopoverPortal;
var Content2 = PopoverContent;
var Close = PopoverClose;
var Arrow2 = PopoverArrow;

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/primitive/dist/index.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/primitive/dist/index.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),
/* harmony export */   composeEventHandlers: () => (/* binding */ composeEventHandlers),
/* harmony export */   getActiveElement: () => (/* binding */ getActiveElement),
/* harmony export */   getOwnerDocument: () => (/* binding */ getOwnerDocument),
/* harmony export */   getOwnerWindow: () => (/* binding */ getOwnerWindow),
/* harmony export */   isFrame: () => (/* binding */ isFrame)
/* harmony export */ });
// src/primitive.tsx
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler?.(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) {
      return ourEventHandler?.(event);
    }
  };
}
function getOwnerWindow(element) {
  if (!canUseDOM) {
    throw new Error("Cannot access window outside of the DOM");
  }
  return element?.ownerDocument?.defaultView ?? window;
}
function getOwnerDocument(element) {
  if (!canUseDOM) {
    throw new Error("Cannot access document outside of the DOM");
  }
  return element?.ownerDocument ?? document;
}
function getActiveElement(node, activeDescendant = false) {
  const { activeElement } = getOwnerDocument(node);
  if (!activeElement?.nodeName) {
    return null;
  }
  if (isFrame(activeElement) && activeElement.contentDocument) {
    return getActiveElement(activeElement.contentDocument.body, activeDescendant);
  }
  if (activeDescendant) {
    const id = activeElement.getAttribute("aria-activedescendant");
    if (id) {
      const element = getOwnerDocument(activeElement).getElementById(id);
      if (element) {
        return element;
      }
    }
  }
  return activeElement;
}
function isFrame(element) {
  return element.tagName === "IFRAME";
}

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Branch: () => (/* binding */ Branch),
/* harmony export */   DismissableLayer: () => (/* binding */ DismissableLayer),
/* harmony export */   DismissableLayerBranch: () => (/* binding */ DismissableLayerBranch),
/* harmony export */   Root: () => (/* binding */ Root)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/primitive */ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/primitive/dist/index.mjs");
/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-primitive */ "./node_modules/@radix-ui/react-primitive/dist/index.mjs");
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ "./node_modules/@radix-ui/react-compose-refs/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ "./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-use-escape-keydown */ "./node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
"use client";

// src/dismissable-layer.tsx







var DISMISSABLE_LAYER_NAME = "DismissableLayer";
var CONTEXT_UPDATE = "dismissableLayer.update";
var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
var originalBodyPointerEvents;
var DismissableLayerContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
var DismissableLayer = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const {
      disableOutsidePointerEvents = false,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      onDismiss,
      ...layerProps
    } = props;
    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DismissableLayerContext);
    const [node, setNode] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);
    const ownerDocument = node?.ownerDocument ?? globalThis?.document;
    const [, force] = react__WEBPACK_IMPORTED_MODULE_0__.useState({});
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__.useComposedRefs)(forwardedRef, (node2) => setNode(node2));
    const layers = Array.from(context.layers);
    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);
    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
    const index = node ? layers.indexOf(node) : -1;
    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;
    const pointerDownOutside = usePointerDownOutside((event) => {
      const target = event.target;
      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));
      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
      onPointerDownOutside?.(event);
      onInteractOutside?.(event);
      if (!event.defaultPrevented) onDismiss?.();
    }, ownerDocument);
    const focusOutside = useFocusOutside((event) => {
      const target = event.target;
      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));
      if (isFocusInBranch) return;
      onFocusOutside?.(event);
      onInteractOutside?.(event);
      if (!event.defaultPrevented) onDismiss?.();
    }, ownerDocument);
    (0,_radix_ui_react_use_escape_keydown__WEBPACK_IMPORTED_MODULE_5__.useEscapeKeydown)((event) => {
      const isHighestLayer = index === context.layers.size - 1;
      if (!isHighestLayer) return;
      onEscapeKeyDown?.(event);
      if (!event.defaultPrevented && onDismiss) {
        event.preventDefault();
        onDismiss();
      }
    }, ownerDocument);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
      if (!node) return;
      if (disableOutsidePointerEvents) {
        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
          ownerDocument.body.style.pointerEvents = "none";
        }
        context.layersWithOutsidePointerEventsDisabled.add(node);
      }
      context.layers.add(node);
      dispatchUpdate();
      return () => {
        if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {
          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
        }
      };
    }, [node, ownerDocument, disableOutsidePointerEvents, context]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
      return () => {
        if (!node) return;
        context.layers.delete(node);
        context.layersWithOutsidePointerEventsDisabled.delete(node);
        dispatchUpdate();
      };
    }, [node, context]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
      const handleUpdate = () => force({});
      document.addEventListener(CONTEXT_UPDATE, handleUpdate);
      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
    }, []);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(
      _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__.Primitive.div,
      {
        ...layerProps,
        ref: composedRefs,
        style: {
          pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
          ...props.style
        },
        onFocusCapture: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(props.onFocusCapture, focusOutside.onFocusCapture),
        onBlurCapture: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(props.onBlurCapture, focusOutside.onBlurCapture),
        onPointerDownCapture: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_1__.composeEventHandlers)(
          props.onPointerDownCapture,
          pointerDownOutside.onPointerDownCapture
        )
      }
    );
  }
);
DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
var BRANCH_NAME = "DismissableLayerBranch";
var DismissableLayerBranch = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef) => {
  const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DismissableLayerContext);
  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
  const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_3__.useComposedRefs)(forwardedRef, ref);
  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
    const node = ref.current;
    if (node) {
      context.branches.add(node);
      return () => {
        context.branches.delete(node);
      };
    }
  }, [context.branches]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__.Primitive.div, { ...props, ref: composedRefs });
});
DismissableLayerBranch.displayName = BRANCH_NAME;
function usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis?.document) {
  const handlePointerDownOutside = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_4__.useCallbackRef)(onPointerDownOutside);
  const isPointerInsideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
  const handleClickRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {
  });
  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent2 = function() {
          handleAndDispatchCustomEvent(
            POINTER_DOWN_OUTSIDE,
            handlePointerDownOutside,
            eventDetail,
            { discrete: true }
          );
        };
        var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
        const eventDetail = { originalEvent: event };
        if (event.pointerType === "touch") {
          ownerDocument.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
          ownerDocument.addEventListener("click", handleClickRef.current, { once: true });
        } else {
          handleAndDispatchPointerDownOutsideEvent2();
        }
      } else {
        ownerDocument.removeEventListener("click", handleClickRef.current);
      }
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      ownerDocument.removeEventListener("pointerdown", handlePointerDown);
      ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [ownerDocument, handlePointerDownOutside]);
  return {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
  };
}
function useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {
  const handleFocusOutside = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_4__.useCallbackRef)(onFocusOutside);
  const isFocusInsideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
    const handleFocus = (event) => {
      if (event.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = { originalEvent: event };
        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
          discrete: false
        });
      }
    };
    ownerDocument.addEventListener("focusin", handleFocus);
    return () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [ownerDocument, handleFocusOutside]);
  return {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = false
  };
}
function dispatchUpdate() {
  const event = new CustomEvent(CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });
  if (handler) target.addEventListener(name, handler, { once: true });
  if (discrete) {
    (0,_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__.dispatchDiscreteCustomEvent)(target, event);
  } else {
    target.dispatchEvent(event);
  }
}
var Root = DismissableLayer;
var Branch = DismissableLayerBranch;

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-focus-guards/dist/index.mjs":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-focus-guards/dist/index.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusGuards: () => (/* binding */ FocusGuards),
/* harmony export */   Root: () => (/* binding */ FocusGuards),
/* harmony export */   useFocusGuards: () => (/* binding */ useFocusGuards)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
"use client";

// src/focus-guards.tsx

var count = 0;
function FocusGuards(props) {
  useFocusGuards();
  return props.children;
}
function useFocusGuards() {
  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement("afterbegin", edgeGuards[0] ?? createFocusGuard());
    document.body.insertAdjacentElement("beforeend", edgeGuards[1] ?? createFocusGuard());
    count++;
    return () => {
      if (count === 1) {
        document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
      }
      count--;
    };
  }, []);
}
function createFocusGuard() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.outline = "none";
  element.style.opacity = "0";
  element.style.position = "fixed";
  element.style.pointerEvents = "none";
  return element;
}

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-popper/dist/index.mjs":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-popper/dist/index.mjs ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ALIGN_OPTIONS: () => (/* binding */ ALIGN_OPTIONS),
/* harmony export */   Anchor: () => (/* binding */ Anchor),
/* harmony export */   Arrow: () => (/* binding */ Arrow),
/* harmony export */   Content: () => (/* binding */ Content),
/* harmony export */   Popper: () => (/* binding */ Popper),
/* harmony export */   PopperAnchor: () => (/* binding */ PopperAnchor),
/* harmony export */   PopperArrow: () => (/* binding */ PopperArrow),
/* harmony export */   PopperContent: () => (/* binding */ PopperContent),
/* harmony export */   Root: () => (/* binding */ Root2),
/* harmony export */   SIDE_OPTIONS: () => (/* binding */ SIDE_OPTIONS),
/* harmony export */   createPopperScope: () => (/* binding */ createPopperScope)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/react-dom */ "./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs");
/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/react-dom */ "./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs");
/* harmony import */ var _radix_ui_react_arrow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-arrow */ "./node_modules/@radix-ui/react-arrow/dist/index.mjs");
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ "./node_modules/@radix-ui/react-compose-refs/dist/index.mjs");
/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-context */ "./node_modules/@radix-ui/react-context/dist/index.mjs");
/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/react-primitive */ "./node_modules/@radix-ui/react-primitive/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-use-callback-ref */ "./node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @radix-ui/react-use-layout-effect */ "./node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @radix-ui/react-use-size */ "./node_modules/@radix-ui/react-use-size/dist/index.mjs");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
"use client";

// src/popper.tsx










var SIDE_OPTIONS = ["top", "right", "bottom", "left"];
var ALIGN_OPTIONS = ["start", "center", "end"];
var POPPER_NAME = "Popper";
var [createPopperContext, createPopperScope] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_5__.createContextScope)(POPPER_NAME);
var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
var Popper = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(PopperProvider, { scope: __scopePopper, anchor, onAnchorChange: setAnchor, children });
};
Popper.displayName = POPPER_NAME;
var ANCHOR_NAME = "PopperAnchor";
var PopperAnchor = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopper, virtualRef, ...anchorProps } = props;
    const context = usePopperContext(ANCHOR_NAME, __scopePopper);
    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, ref);
    const anchorRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
      const previousAnchor = anchorRef.current;
      anchorRef.current = virtualRef?.current || ref.current;
      if (previousAnchor !== anchorRef.current) {
        context.onAnchorChange(anchorRef.current);
      }
    });
    return virtualRef ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_6__.Primitive.div, { ...anchorProps, ref: composedRefs });
  }
);
PopperAnchor.displayName = ANCHOR_NAME;
var CONTENT_NAME = "PopperContent";
var [PopperContentProvider, useContentContext] = createPopperContext(CONTENT_NAME);
var PopperContent = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopePopper,
      side = "bottom",
      sideOffset = 0,
      align = "center",
      alignOffset = 0,
      arrowPadding = 0,
      avoidCollisions = true,
      collisionBoundary = [],
      collisionPadding: collisionPaddingProp = 0,
      sticky = "partial",
      hideWhenDetached = false,
      updatePositionStrategy = "optimized",
      onPlaced,
      ...contentProps
    } = props;
    const context = usePopperContext(CONTENT_NAME, __scopePopper);
    const [content, setContent] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);
    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, (node) => setContent(node));
    const [arrow, setArrow] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);
    const arrowSize = (0,_radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_9__.useSize)(arrow);
    const arrowWidth = arrowSize?.width ?? 0;
    const arrowHeight = arrowSize?.height ?? 0;
    const desiredPlacement = side + (align !== "center" ? "-" + align : "");
    const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };
    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];
    const hasExplicitBoundaries = boundary.length > 0;
    const detectOverflowOptions = {
      padding: collisionPadding,
      boundary: boundary.filter(isNotNull),
      // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
      altBoundary: hasExplicitBoundaries
    };
    const { refs, floatingStyles, placement, isPositioned, middlewareData } = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.useFloating)({
      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
      strategy: "fixed",
      placement: desiredPlacement,
      whileElementsMounted: (...args) => {
        const cleanup = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.autoUpdate)(...args, {
          animationFrame: updatePositionStrategy === "always"
        });
        return cleanup;
      },
      elements: {
        reference: context.anchor
      },
      middleware: [
        (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.offset)({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),
        avoidCollisions && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.shift)({
          mainAxis: true,
          crossAxis: false,
          limiter: sticky === "partial" ? (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.limitShift)() : void 0,
          ...detectOverflowOptions
        }),
        avoidCollisions && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.flip)({ ...detectOverflowOptions }),
        (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.size)({
          ...detectOverflowOptions,
          apply: ({ elements, rects, availableWidth, availableHeight }) => {
            const { width: anchorWidth, height: anchorHeight } = rects.reference;
            const contentStyle = elements.floating.style;
            contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
            contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
            contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
            contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
          }
        }),
        arrow && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.arrow)({ element: arrow, padding: arrowPadding }),
        transformOrigin({ arrowWidth, arrowHeight }),
        hideWhenDetached && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.hide)({ strategy: "referenceHidden", ...detectOverflowOptions })
      ]
    });
    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
    const handlePlaced = (0,_radix_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_7__.useCallbackRef)(onPlaced);
    (0,_radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_8__.useLayoutEffect)(() => {
      if (isPositioned) {
        handlePlaced?.();
      }
    }, [isPositioned, handlePlaced]);
    const arrowX = middlewareData.arrow?.x;
    const arrowY = middlewareData.arrow?.y;
    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;
    const [contentZIndex, setContentZIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState();
    (0,_radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_8__.useLayoutEffect)(() => {
      if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [content]);
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(
      "div",
      {
        ref: refs.setFloating,
        "data-radix-popper-content-wrapper": "",
        style: {
          ...floatingStyles,
          transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
          // keep off the page when measuring
          minWidth: "max-content",
          zIndex: contentZIndex,
          ["--radix-popper-transform-origin"]: [
            middlewareData.transformOrigin?.x,
            middlewareData.transformOrigin?.y
          ].join(" "),
          // hide the content if using the hide middleware and should be hidden
          // set visibility to hidden and disable pointer events so the UI behaves
          // as if the PopperContent isn't there at all
          ...middlewareData.hide?.referenceHidden && {
            visibility: "hidden",
            pointerEvents: "none"
          }
        },
        dir: props.dir,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(
          PopperContentProvider,
          {
            scope: __scopePopper,
            placedSide,
            onArrowChange: setArrow,
            arrowX,
            arrowY,
            shouldHideArrow: cannotCenterArrow,
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(
              _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_6__.Primitive.div,
              {
                "data-side": placedSide,
                "data-align": placedAlign,
                ...contentProps,
                ref: composedRefs,
                style: {
                  ...contentProps.style,
                  // if the PopperContent hasn't been placed yet (not all measurements done)
                  // we prevent animations so that users's animation don't kick in too early referring wrong sides
                  animation: !isPositioned ? "none" : void 0
                }
              }
            )
          }
        )
      }
    );
  }
);
PopperContent.displayName = CONTENT_NAME;
var ARROW_NAME = "PopperArrow";
var OPPOSITE_SIDE = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
var PopperArrow = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function PopperArrow2(props, forwardedRef) {
  const { __scopePopper, ...arrowProps } = props;
  const contentContext = useContentContext(ARROW_NAME, __scopePopper);
  const baseSide = OPPOSITE_SIDE[contentContext.placedSide];
  return (
    // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
    // doesn't report size as we'd expect on SVG elements.
    // it reports their bounding box which is effectively the largest path inside the SVG.
    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(
      "span",
      {
        ref: contentContext.onArrowChange,
        style: {
          position: "absolute",
          left: contentContext.arrowX,
          top: contentContext.arrowY,
          [baseSide]: 0,
          transformOrigin: {
            top: "",
            right: "0 0",
            bottom: "center 0",
            left: "100% 0"
          }[contentContext.placedSide],
          transform: {
            top: "translateY(100%)",
            right: "translateY(50%) rotate(90deg) translateX(-50%)",
            bottom: `rotate(180deg)`,
            left: "translateY(50%) rotate(-90deg) translateX(50%)"
          }[contentContext.placedSide],
          visibility: contentContext.shouldHideArrow ? "hidden" : void 0
        },
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(
          _radix_ui_react_arrow__WEBPACK_IMPORTED_MODULE_3__.Root,
          {
            ...arrowProps,
            ref: forwardedRef,
            style: {
              ...arrowProps.style,
              // ensures the element can be measured correctly (mostly for if SVG)
              display: "block"
            }
          }
        )
      }
    )
  );
});
PopperArrow.displayName = ARROW_NAME;
function isNotNull(value) {
  return value !== null;
}
var transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
    const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[placedAlign];
    const arrowXCenter = (middlewareData.arrow?.x ?? 0) + arrowWidth / 2;
    const arrowYCenter = (middlewareData.arrow?.y ?? 0) + arrowHeight / 2;
    let x = "";
    let y = "";
    if (placedSide === "bottom") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x = `${-arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x = `${rects.floating.width + arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return { data: { x, y } };
  }
});
function getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [side, align];
}
var Root2 = Popper;
var Anchor = PopperAnchor;
var Content = PopperContent;
var Arrow = PopperArrow;

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-presence/dist/index.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-presence/dist/index.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Presence: () => (/* binding */ Presence),
/* harmony export */   Root: () => (/* binding */ Root)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ "./node_modules/@radix-ui/react-compose-refs/dist/index.mjs");
/* harmony import */ var _radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-use-layout-effect */ "./node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs");
"use client";

// src/presence.tsx




// src/use-state-machine.tsx

function useStateMachine(initialState, machine) {
  return react__WEBPACK_IMPORTED_MODULE_0__.useReducer((state, event) => {
    const nextState = machine[state][event];
    return nextState ?? state;
  }, initialState);
}

// src/presence.tsx
var Presence = (props) => {
  const { present, children } = props;
  const presence = usePresence(present);
  const child = typeof children === "function" ? children({ present: presence.isPresent }) : react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children);
  const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_1__.useComposedRefs)(presence.ref, getElementRef(child));
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent ? react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, { ref }) : null;
};
Presence.displayName = "Presence";
function usePresence(present) {
  const [node, setNode] = react__WEBPACK_IMPORTED_MODULE_0__.useState();
  const stylesRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
  const prevPresentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(present);
  const prevAnimationNameRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send] = useStateMachine(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
    const currentAnimationName = getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [state]);
  (0,_radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = getAnimationName(styles);
      if (present) {
        send("MOUNT");
      } else if (currentAnimationName === "none" || styles?.display === "none") {
        send("UNMOUNT");
      } else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating) {
          send("ANIMATION_OUT");
        } else {
          send("UNMOUNT");
        }
      }
      prevPresentRef.current = present;
    }
  }, [present, send]);
  (0,_radix_ui_react_use_layout_effect__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(() => {
    if (node) {
      let timeoutId;
      const ownerWindow = node.ownerDocument.defaultView ?? window;
      const handleAnimationEnd = (event) => {
        const currentAnimationName = getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(CSS.escape(event.animationName));
        if (event.target === node && isCurrentAnimation) {
          send("ANIMATION_END");
          if (!prevPresentRef.current) {
            const currentFillMode = node.style.animationFillMode;
            node.style.animationFillMode = "forwards";
            timeoutId = ownerWindow.setTimeout(() => {
              if (node.style.animationFillMode === "forwards") {
                node.style.animationFillMode = currentFillMode;
              }
            });
          }
        }
      };
      const handleAnimationStart = (event) => {
        if (event.target === node) {
          prevAnimationNameRef.current = getAnimationName(stylesRef.current);
        }
      };
      node.addEventListener("animationstart", handleAnimationStart);
      node.addEventListener("animationcancel", handleAnimationEnd);
      node.addEventListener("animationend", handleAnimationEnd);
      return () => {
        ownerWindow.clearTimeout(timeoutId);
        node.removeEventListener("animationstart", handleAnimationStart);
        node.removeEventListener("animationcancel", handleAnimationEnd);
        node.removeEventListener("animationend", handleAnimationEnd);
      };
    } else {
      send("ANIMATION_END");
    }
  }, [node, send]);
  return {
    isPresent: ["mounted", "unmountSuspended"].includes(state),
    ref: react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node2) => {
      stylesRef.current = node2 ? getComputedStyle(node2) : null;
      setNode(node2);
    }, [])
  };
}
function getAnimationName(styles) {
  return styles?.animationName || "none";
}
function getElementRef(element) {
  let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}
var Root = Presence;

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ "./node_modules/class-variance-authority/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/class-variance-authority/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cva: () => (/* binding */ cva),
/* harmony export */   cx: () => (/* binding */ cx)
/* harmony export */ });
/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ "./node_modules/clsx/dist/clsx.mjs");
/**
 * Copyright 2022 Joe Bell. All rights reserved.
 *
 * This file is licensed to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */ 
const falsyToString = (value)=>typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
const cx = clsx__WEBPACK_IMPORTED_MODULE_0__.clsx;
const cva = (base, config)=>(props)=>{
        var _config_compoundVariants;
        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
        const { variants, defaultVariants } = config;
        const getVariantClassNames = Object.keys(variants).map((variant)=>{
            const variantProp = props === null || props === void 0 ? void 0 : props[variant];
            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
            if (variantProp === null) return null;
            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
            return variants[variant][variantKey];
        });
        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{
            let [key, value] = param;
            if (value === undefined) {
                return acc;
            }
            acc[key] = value;
            return acc;
        }, {});
        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{
            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;
            return Object.entries(compoundVariantOptions).every((param)=>{
                let [key, value] = param;
                return Array.isArray(value) ? value.includes({
                    ...defaultVariants,
                    ...propsWithoutUndefined
                }[key]) : ({
                    ...defaultVariants,
                    ...propsWithoutUndefined
                })[key] === value;
            }) ? [
                ...acc,
                cvClass,
                cvClassName
            ] : acc;
        }, []);
        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    };



/***/ }),

/***/ "./node_modules/date-fns/_lib/normalizeInterval.js":
/*!*********************************************************!*\
  !*** ./node_modules/date-fns/_lib/normalizeInterval.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeInterval: () => (/* binding */ normalizeInterval)
/* harmony export */ });
/* harmony import */ var _normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");


function normalizeInterval(context, interval) {
  const [start, end] = (0,_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(context, interval.start, interval.end);
  return { start, end };
}


/***/ }),

/***/ "./node_modules/date-fns/addWeeks.js":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/addWeeks.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addWeeks: () => (/* binding */ addWeeks),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addDays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addDays.js */ "./node_modules/date-fns/addDays.js");


/**
 * The {@link addWeeks} function options.
 */

/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of weeks to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be added.
 * @param options - An object with options
 *
 * @returns The new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks(date, amount, options) {
  return (0,_addDays_js__WEBPACK_IMPORTED_MODULE_0__.addDays)(date, amount * 7, options);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addWeeks);


/***/ }),

/***/ "./node_modules/date-fns/addYears.js":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/addYears.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addYears: () => (/* binding */ addYears),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _addMonths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addMonths.js */ "./node_modules/date-fns/addMonths.js");


/**
 * The {@link addYears} function options.
 */

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type.
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be added.
 * @param options - The options
 *
 * @returns The new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears(date, amount, options) {
  return (0,_addMonths_js__WEBPACK_IMPORTED_MODULE_0__.addMonths)(date, amount * 12, options);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addYears);


/***/ }),

/***/ "./node_modules/date-fns/differenceInCalendarMonths.js":
/*!*************************************************************!*\
  !*** ./node_modules/date-fns/differenceInCalendarMonths.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInCalendarMonths: () => (/* binding */ differenceInCalendarMonths)
/* harmony export */ });
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");


/**
 * The {@link differenceInCalendarMonths} function options.
 */

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();

  return yearsDiff * 12 + monthsDiff;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInCalendarMonths);


/***/ }),

/***/ "./node_modules/date-fns/eachMonthOfInterval.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/eachMonthOfInterval.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   eachMonthOfInterval: () => (/* binding */ eachMonthOfInterval)
/* harmony export */ });
/* harmony import */ var _lib_normalizeInterval_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeInterval.js */ "./node_modules/date-fns/_lib/normalizeInterval.js");
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");



/**
 * The {@link eachMonthOfInterval} function options.
 */

/**
 * The {@link eachMonthOfInterval} function result type. It resolves the proper data type.
 */

/**
 * @name eachMonthOfInterval
 * @category Interval Helpers
 * @summary Return the array of months within the specified time interval.
 *
 * @description
 * Return the array of months within the specified time interval.
 *
 * @typeParam IntervalType - Interval type.
 * @typeParam Options - Options type.
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of months from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each month between 6 February 2014 and 10 August 2014:
 * const result = eachMonthOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Sat Feb 01 2014 00:00:00,
 * //   Sat Mar 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Thu May 01 2014 00:00:00,
 * //   Sun Jun 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * //   Fri Aug 01 2014 00:00:00
 * // ]
 */
function eachMonthOfInterval(interval, options) {
  const { start, end } = (0,_lib_normalizeInterval_js__WEBPACK_IMPORTED_MODULE_0__.normalizeInterval)(options?.in, interval);

  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);
  date.setDate(1);

  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }

  const dates = [];

  while (+date <= endTime) {
    dates.push((0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(start, date));
    date.setMonth(date.getMonth() + step);
  }

  return reversed ? dates.reverse() : dates;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (eachMonthOfInterval);


/***/ }),

/***/ "./node_modules/date-fns/endOfISOWeek.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/endOfISOWeek.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfISOWeek: () => (/* binding */ endOfISOWeek)
/* harmony export */ });
/* harmony import */ var _endOfWeek_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endOfWeek.js */ "./node_modules/date-fns/endOfWeek.js");


/**
 * The {@link endOfISOWeek} function options.
 */

/**
 * @name endOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfISOWeek(date, options) {
  return (0,_endOfWeek_js__WEBPACK_IMPORTED_MODULE_0__.endOfWeek)(date, { ...options, weekStartsOn: 1 });
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfISOWeek);


/***/ }),

/***/ "./node_modules/date-fns/endOfMonth.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/endOfMonth.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfMonth: () => (/* binding */ endOfMonth)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link endOfMonth} function options.
 */

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfMonth);


/***/ }),

/***/ "./node_modules/date-fns/endOfWeek.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/endOfWeek.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfWeek: () => (/* binding */ endOfWeek)
/* harmony export */ });
/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ "./node_modules/date-fns/_lib/defaultOptions.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");



/**
 * The {@link endOfWeek} function options.
 */

/**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek(date, options) {
  const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, options?.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

  _date.setDate(_date.getDate() + diff);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfWeek);


/***/ }),

/***/ "./node_modules/date-fns/endOfYear.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/endOfYear.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfYear: () => (/* binding */ endOfYear)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link endOfYear} function options.
 */

/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - The options
 *
 * @returns The end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);
  const year = _date.getFullYear();
  _date.setFullYear(year + 1, 0, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfYear);


/***/ }),

/***/ "./node_modules/date-fns/getDaysInMonth.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/getDaysInMonth.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getDaysInMonth: () => (/* binding */ getDaysInMonth)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");



/**
 * The {@link getDaysInMonth} function options.
 */

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date, considering the context if provided.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, options?.in);
  const year = _date.getFullYear();
  const monthIndex = _date.getMonth();
  const lastDayOfMonth = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(_date, 0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDaysInMonth);


/***/ }),

/***/ "./node_modules/date-fns/getMonth.js":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/getMonth.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getMonth: () => (/* binding */ getMonth)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link getMonth} function options.
 */

/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The month index (0-11)
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
function getMonth(date, options) {
  return (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in).getMonth();
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMonth);


/***/ }),

/***/ "./node_modules/date-fns/getYear.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/getYear.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getYear: () => (/* binding */ getYear)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link getYear} function options.
 */

/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The year
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
function getYear(date, options) {
  return (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in).getFullYear();
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getYear);


/***/ }),

/***/ "./node_modules/date-fns/isAfter.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/isAfter.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isAfter: () => (/* binding */ isAfter)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param date - The date that should be after the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter(date, dateToCompare) {
  return +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date) > +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateToCompare);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isAfter);


/***/ }),

/***/ "./node_modules/date-fns/isBefore.js":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/isBefore.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isBefore: () => (/* binding */ isBefore)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param date - The date that should be before the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore(date, dateToCompare) {
  return +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date) < +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateToCompare);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isBefore);


/***/ }),

/***/ "./node_modules/date-fns/isSameDay.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/isSameDay.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isSameDay: () => (/* binding */ isSameDay)
/* harmony export */ });
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");
/* harmony import */ var _startOfDay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfDay.js */ "./node_modules/date-fns/startOfDay.js");



/**
 * The {@link isSameDay} function options.
 */

/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * @param laterDate - The first date to check
 * @param earlierDate - The second date to check
 * @param options - An object with options
 *
 * @returns The dates are in the same day (and year and month)
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 *
 * @example
 * // Are 4 September and 4 October in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 *
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */
function isSameDay(laterDate, earlierDate, options) {
  const [dateLeft_, dateRight_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );
  return +(0,_startOfDay_js__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(dateLeft_) === +(0,_startOfDay_js__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(dateRight_);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSameDay);


/***/ }),

/***/ "./node_modules/date-fns/isSameMonth.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/isSameMonth.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isSameMonth: () => (/* binding */ isSameMonth)
/* harmony export */ });
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");


/**
 * The {@link isSameMonth} function options.
 */

/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * @param laterDate - The first date to check
 * @param earlierDate - The second date to check
 * @param options - An object with options
 *
 * @returns The dates are in the same month (and year)
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */
function isSameMonth(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );
  return (
    laterDate_.getFullYear() === earlierDate_.getFullYear() &&
    laterDate_.getMonth() === earlierDate_.getMonth()
  );
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSameMonth);


/***/ }),

/***/ "./node_modules/date-fns/isSameYear.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/isSameYear.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isSameYear: () => (/* binding */ isSameYear)
/* harmony export */ });
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");


/**
 * The {@link isSameYear} function options.
 */

/**
 * @name isSameYear
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * @param laterDate - The first date to check
 * @param earlierDate - The second date to check
 * @param options - An object with options
 *
 * @returns The dates are in the same year
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */
function isSameYear(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );
  return laterDate_.getFullYear() === earlierDate_.getFullYear();
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSameYear);


/***/ }),

/***/ "./node_modules/date-fns/max.js":
/*!**************************************!*\
  !*** ./node_modules/date-fns/max.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   max: () => (/* binding */ max)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");



/**
 * The {@link max} function options.
 */

/**
 * @name max
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param dates - The dates to compare
 *
 * @returns The latest of the dates
 *
 * @example
 * // Which of these dates is the latest?
 * const result = max([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Sun Jul 02 1995 00:00:00
 */
function max(dates, options) {
  let result;
  let context = options?.in;

  dates.forEach((date) => {
    // Use the first date object as the context function
    if (!context && typeof date === "object")
      context = _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom.bind(null, date);

    const date_ = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, context);
    if (!result || result < date_ || isNaN(+date_)) result = date_;
  });

  return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(context, result || NaN);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (max);


/***/ }),

/***/ "./node_modules/date-fns/min.js":
/*!**************************************!*\
  !*** ./node_modules/date-fns/min.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   min: () => (/* binding */ min)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");



/**
 * The {@link min} function options.
 */

/**
 * @name min
 * @category Common Helpers
 * @summary Returns the earliest of the given dates.
 *
 * @description
 * Returns the earliest of the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param dates - The dates to compare
 *
 * @returns The earliest of the dates
 *
 * @example
 * // Which of these dates is the earliest?
 * const result = min([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Wed Feb 11 1987 00:00:00
 */
function min(dates, options) {
  let result;
  let context = options?.in;

  dates.forEach((date) => {
    // Use the first date object as the context function
    if (!context && typeof date === "object")
      context = _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom.bind(null, date);

    const date_ = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, context);
    if (!result || result > date_ || isNaN(+date_)) result = date_;
  });

  return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(context, result || NaN);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (min);


/***/ }),

/***/ "./node_modules/date-fns/setMonth.js":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/setMonth.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   setMonth: () => (/* binding */ setMonth)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");
/* harmony import */ var _getDaysInMonth_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDaysInMonth.js */ "./node_modules/date-fns/getDaysInMonth.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");




/**
 * The {@link setMonth} function options.
 */

/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param month - The month index to set (0-11)
 * @param options - The options
 *
 * @returns The new date with the month set
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */
function setMonth(date, month, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_2__.toDate)(date, options?.in);
  const year = _date.getFullYear();
  const day = _date.getDate();

  const midMonth = (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(options?.in || date, 0);
  midMonth.setFullYear(year, month, 15);
  midMonth.setHours(0, 0, 0, 0);
  const daysInMonth = (0,_getDaysInMonth_js__WEBPACK_IMPORTED_MODULE_1__.getDaysInMonth)(midMonth);

  // Set the earlier date, allows to wrap Jan 31 to Feb 28
  _date.setMonth(month, Math.min(day, daysInMonth));
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setMonth);


/***/ }),

/***/ "./node_modules/date-fns/setYear.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/setYear.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   setYear: () => (/* binding */ setYear)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");



/**
 * The {@link setYear} function options.
 */

/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The date to be changed
 * @param year - The year of the new date
 * @param options - An object with options.
 *
 * @returns The new date with the year set
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */
function setYear(date, year, options) {
  const date_ = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, options?.in);

  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
  if (isNaN(+date_)) return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(options?.in || date, NaN);

  date_.setFullYear(year);
  return date_;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setYear);


/***/ }),

/***/ "./node_modules/date-fns/startOfMonth.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/startOfMonth.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startOfMonth: () => (/* binding */ startOfMonth)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link startOfMonth} function options.
 */

/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date. The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments.
 * Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed,
 * or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a month
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);
  _date.setDate(1);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfMonth);


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/icons/calendar.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/calendar.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ Calendar)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "./node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [
  ["path", { d: "M8 2v4", key: "1cmpym" }],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
  ["path", { d: "M3 10h18", key: "8toen8" }]
];
const Calendar = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("calendar", __iconNode);


//# sourceMappingURL=calendar.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/icons/chevron-left.js":
/*!******************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/chevron-left.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ ChevronLeft)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "./node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]];
const ChevronLeft = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("chevron-left", __iconNode);


//# sourceMappingURL=chevron-left.js.map


/***/ }),

/***/ "./node_modules/lucide-react/dist/esm/icons/chevron-right.js":
/*!*******************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/chevron-right.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ ChevronRight)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "./node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]];
const ChevronRight = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("chevron-right", __iconNode);


//# sourceMappingURL=chevron-right.js.map


/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/DayPicker.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/DayPicker.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DayPicker: () => (/* binding */ DayPicker)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @date-fns/tz */ "./node_modules/@date-fns/tz/index.js");
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./classes/DateLib.js */ "./node_modules/date-fns/locale/en-US.js");
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");
/* harmony import */ var _helpers_createGetModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/createGetModifiers.js */ "./node_modules/react-day-picker/dist/esm/helpers/createGetModifiers.js");
/* harmony import */ var _helpers_getClassNamesForModifiers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/getClassNamesForModifiers.js */ "./node_modules/react-day-picker/dist/esm/helpers/getClassNamesForModifiers.js");
/* harmony import */ var _helpers_getComponents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/getComponents.js */ "./node_modules/react-day-picker/dist/esm/helpers/getComponents.js");
/* harmony import */ var _helpers_getDataAttributes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers/getDataAttributes.js */ "./node_modules/react-day-picker/dist/esm/helpers/getDataAttributes.js");
/* harmony import */ var _helpers_getDefaultClassNames_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/getDefaultClassNames.js */ "./node_modules/react-day-picker/dist/esm/helpers/getDefaultClassNames.js");
/* harmony import */ var _helpers_getFormatters_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/getFormatters.js */ "./node_modules/react-day-picker/dist/esm/helpers/getFormatters.js");
/* harmony import */ var _helpers_getMonthOptions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/getMonthOptions.js */ "./node_modules/react-day-picker/dist/esm/helpers/getMonthOptions.js");
/* harmony import */ var _helpers_getStyleForModifiers_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/getStyleForModifiers.js */ "./node_modules/react-day-picker/dist/esm/helpers/getStyleForModifiers.js");
/* harmony import */ var _helpers_getWeekdays_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./helpers/getWeekdays.js */ "./node_modules/react-day-picker/dist/esm/helpers/getWeekdays.js");
/* harmony import */ var _helpers_getYearOptions_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./helpers/getYearOptions.js */ "./node_modules/react-day-picker/dist/esm/helpers/getYearOptions.js");
/* harmony import */ var _labels_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./labels/index.js */ "./node_modules/react-day-picker/dist/esm/labels/index.js");
/* harmony import */ var _useAnimation_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./useAnimation.js */ "./node_modules/react-day-picker/dist/esm/useAnimation.js");
/* harmony import */ var _useCalendar_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./useCalendar.js */ "./node_modules/react-day-picker/dist/esm/useCalendar.js");
/* harmony import */ var _useDayPicker_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./useDayPicker.js */ "./node_modules/react-day-picker/dist/esm/useDayPicker.js");
/* harmony import */ var _useFocus_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./useFocus.js */ "./node_modules/react-day-picker/dist/esm/useFocus.js");
/* harmony import */ var _useSelection_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./useSelection.js */ "./node_modules/react-day-picker/dist/esm/useSelection.js");
/* harmony import */ var _utils_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/rangeIncludesDate.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js");
/* harmony import */ var _utils_typeguards_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/typeguards.js */ "./node_modules/react-day-picker/dist/esm/utils/typeguards.js");






















/**
 * Renders the DayPicker calendar component.
 *
 * @param initialProps - The props for the DayPicker component.
 * @returns The rendered DayPicker component.
 * @group DayPicker
 * @see https://daypicker.dev
 */
function DayPicker(initialProps) {
    let props = initialProps;
    if (props.timeZone) {
        props = {
            ...initialProps
        };
        if (props.today) {
            props.today = new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.today, props.timeZone);
        }
        if (props.month) {
            props.month = new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.month, props.timeZone);
        }
        if (props.defaultMonth) {
            props.defaultMonth = new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.defaultMonth, props.timeZone);
        }
        if (props.startMonth) {
            props.startMonth = new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.startMonth, props.timeZone);
        }
        if (props.endMonth) {
            props.endMonth = new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.endMonth, props.timeZone);
        }
        if (props.mode === "single" && props.selected) {
            props.selected = new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.selected, props.timeZone);
        }
        else if (props.mode === "multiple" && props.selected) {
            props.selected = props.selected?.map((date) => new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(date, props.timeZone));
        }
        else if (props.mode === "range" && props.selected) {
            props.selected = {
                from: props.selected.from
                    ? new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.selected.from, props.timeZone)
                    : undefined,
                to: props.selected.to
                    ? new _date_fns_tz__WEBPACK_IMPORTED_MODULE_1__.TZDate(props.selected.to, props.timeZone)
                    : undefined
            };
        }
    }
    const { components, formatters, labels, dateLib, locale, classNames } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
        const locale = { ..._classes_DateLib_js__WEBPACK_IMPORTED_MODULE_3__.enUS, ...props.locale };
        const dateLib = new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_4__.DateLib({
            locale,
            weekStartsOn: props.broadcastCalendar ? 1 : props.weekStartsOn,
            firstWeekContainsDate: props.firstWeekContainsDate,
            useAdditionalWeekYearTokens: props.useAdditionalWeekYearTokens,
            useAdditionalDayOfYearTokens: props.useAdditionalDayOfYearTokens,
            timeZone: props.timeZone,
            numerals: props.numerals
        }, props.dateLib);
        return {
            dateLib,
            components: (0,_helpers_getComponents_js__WEBPACK_IMPORTED_MODULE_7__.getComponents)(props.components),
            formatters: (0,_helpers_getFormatters_js__WEBPACK_IMPORTED_MODULE_10__.getFormatters)(props.formatters),
            labels: { ..._labels_index_js__WEBPACK_IMPORTED_MODULE_15__, ...props.labels },
            locale,
            classNames: { ...(0,_helpers_getDefaultClassNames_js__WEBPACK_IMPORTED_MODULE_9__.getDefaultClassNames)(), ...props.classNames }
        };
    }, [
        props.locale,
        props.broadcastCalendar,
        props.weekStartsOn,
        props.firstWeekContainsDate,
        props.useAdditionalWeekYearTokens,
        props.useAdditionalDayOfYearTokens,
        props.timeZone,
        props.numerals,
        props.dateLib,
        props.components,
        props.formatters,
        props.labels,
        props.classNames
    ]);
    const { captionLayout, mode, navLayout, numberOfMonths = 1, onDayBlur, onDayClick, onDayFocus, onDayKeyDown, onDayMouseEnter, onDayMouseLeave, onNextClick, onPrevClick, showWeekNumber, styles } = props;
    const { formatCaption, formatDay, formatMonthDropdown, formatWeekNumber, formatWeekNumberHeader, formatWeekdayName, formatYearDropdown } = formatters;
    const calendar = (0,_useCalendar_js__WEBPACK_IMPORTED_MODULE_17__.useCalendar)(props, dateLib);
    const { days, months, navStart, navEnd, previousMonth, nextMonth, goToMonth } = calendar;
    const getModifiers = (0,_helpers_createGetModifiers_js__WEBPACK_IMPORTED_MODULE_5__.createGetModifiers)(days, props, navStart, navEnd, dateLib);
    const { isSelected, select, selected: selectedValue } = (0,_useSelection_js__WEBPACK_IMPORTED_MODULE_20__.useSelection)(props, dateLib) ?? {};
    const { blur, focused, isFocusTarget, moveFocus, setFocused } = (0,_useFocus_js__WEBPACK_IMPORTED_MODULE_19__.useFocus)(props, calendar, getModifiers, isSelected ?? (() => false), dateLib);
    const { labelDayButton, labelGridcell, labelGrid, labelMonthDropdown, labelNav, labelPrevious, labelNext, labelWeekday, labelWeekNumber, labelWeekNumberHeader, labelYearDropdown } = labels;
    const weekdays = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_helpers_getWeekdays_js__WEBPACK_IMPORTED_MODULE_13__.getWeekdays)(dateLib, props.ISOWeek), [dateLib, props.ISOWeek]);
    const isInteractive = mode !== undefined || onDayClick !== undefined;
    const handlePreviousClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
        if (!previousMonth)
            return;
        goToMonth(previousMonth);
        onPrevClick?.(previousMonth);
    }, [previousMonth, goToMonth, onPrevClick]);
    const handleNextClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
        if (!nextMonth)
            return;
        goToMonth(nextMonth);
        onNextClick?.(nextMonth);
    }, [goToMonth, nextMonth, onNextClick]);
    const handleDayClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((day, m) => (e) => {
        e.preventDefault();
        e.stopPropagation();
        setFocused(day);
        select?.(day.date, m, e);
        onDayClick?.(day.date, m, e);
    }, [select, onDayClick, setFocused]);
    const handleDayFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((day, m) => (e) => {
        setFocused(day);
        onDayFocus?.(day.date, m, e);
    }, [onDayFocus, setFocused]);
    const handleDayBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((day, m) => (e) => {
        blur();
        onDayBlur?.(day.date, m, e);
    }, [blur, onDayBlur]);
    const handleDayKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((day, modifiers) => (e) => {
        const keyMap = {
            ArrowLeft: [
                e.shiftKey ? "month" : "day",
                props.dir === "rtl" ? "after" : "before"
            ],
            ArrowRight: [
                e.shiftKey ? "month" : "day",
                props.dir === "rtl" ? "before" : "after"
            ],
            ArrowDown: [e.shiftKey ? "year" : "week", "after"],
            ArrowUp: [e.shiftKey ? "year" : "week", "before"],
            PageUp: [e.shiftKey ? "year" : "month", "before"],
            PageDown: [e.shiftKey ? "year" : "month", "after"],
            Home: ["startOfWeek", "before"],
            End: ["endOfWeek", "after"]
        };
        if (keyMap[e.key]) {
            e.preventDefault();
            e.stopPropagation();
            const [moveBy, moveDir] = keyMap[e.key];
            moveFocus(moveBy, moveDir);
        }
        onDayKeyDown?.(day.date, modifiers, e);
    }, [moveFocus, onDayKeyDown, props.dir]);
    const handleDayMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((day, modifiers) => (e) => {
        onDayMouseEnter?.(day.date, modifiers, e);
    }, [onDayMouseEnter]);
    const handleDayMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((day, modifiers) => (e) => {
        onDayMouseLeave?.(day.date, modifiers, e);
    }, [onDayMouseLeave]);
    const handleMonthChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((date) => (e) => {
        const selectedMonth = Number(e.target.value);
        const month = dateLib.setMonth(dateLib.startOfMonth(date), selectedMonth);
        goToMonth(month);
    }, [dateLib, goToMonth]);
    const handleYearChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((date) => (e) => {
        const selectedYear = Number(e.target.value);
        const month = dateLib.setYear(dateLib.startOfMonth(date), selectedYear);
        goToMonth(month);
    }, [dateLib, goToMonth]);
    const { className, style } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
        className: [classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Root], props.className]
            .filter(Boolean)
            .join(" "),
        style: { ...styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Root], ...props.style }
    }), [classNames, props.className, props.style, styles]);
    const dataAttributes = (0,_helpers_getDataAttributes_js__WEBPACK_IMPORTED_MODULE_8__.getDataAttributes)(props);
    const rootElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    (0,_useAnimation_js__WEBPACK_IMPORTED_MODULE_16__.useAnimation)(rootElRef, Boolean(props.animate), {
        classNames,
        months,
        focused,
        dateLib
    });
    const contextValue = {
        dayPickerProps: props,
        selected: selectedValue,
        select: select,
        isSelected,
        months,
        nextMonth,
        previousMonth,
        goToMonth,
        getModifiers,
        components,
        classNames,
        styles,
        labels,
        formatters
    };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_useDayPicker_js__WEBPACK_IMPORTED_MODULE_18__.dayPickerContext.Provider, { value: contextValue },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Root, { rootRef: props.animate ? rootElRef : undefined, className: className, style: style, dir: props.dir, id: props.id, lang: props.lang, nonce: props.nonce, title: props.title, role: props.role, "aria-label": props["aria-label"], ...dataAttributes },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Months, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Months], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Months] },
                !props.hideNavigation && !navLayout && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Nav, { "data-animated-nav": props.animate ? "true" : undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Nav], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Nav], "aria-label": labelNav(), onPreviousClick: handlePreviousClick, onNextClick: handleNextClick, previousMonth: previousMonth, nextMonth: nextMonth })),
                months.map((calendarMonth, displayIndex) => {
                    const dropdownMonths = (0,_helpers_getMonthOptions_js__WEBPACK_IMPORTED_MODULE_11__.getMonthOptions)(calendarMonth.date, navStart, navEnd, formatters, dateLib);
                    const dropdownYears = (0,_helpers_getYearOptions_js__WEBPACK_IMPORTED_MODULE_14__.getYearOptions)(navStart, navEnd, formatters, dateLib);
                    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Month, { "data-animated-month": props.animate ? "true" : undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Month], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Month], key: displayIndex, displayIndex: displayIndex, calendarMonth: calendarMonth },
                        navLayout === "around" &&
                            !props.hideNavigation &&
                            displayIndex === 0 && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PreviousMonthButton, { type: "button", className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.PreviousMonthButton], tabIndex: previousMonth ? undefined : -1, "aria-disabled": previousMonth ? undefined : true, "aria-label": labelPrevious(previousMonth), onClick: handlePreviousClick, "data-animated-button": props.animate ? "true" : undefined },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Chevron, { disabled: previousMonth ? undefined : true, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Chevron], orientation: props.dir === "rtl" ? "right" : "left" }))),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.MonthCaption, { "data-animated-caption": props.animate ? "true" : undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.MonthCaption], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.MonthCaption], calendarMonth: calendarMonth, displayIndex: displayIndex }, captionLayout?.startsWith("dropdown") ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.DropdownNav, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Dropdowns], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Dropdowns] },
                            captionLayout === "dropdown" ||
                                captionLayout === "dropdown-months" ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.MonthsDropdown, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.MonthsDropdown], "aria-label": labelMonthDropdown(), classNames: classNames, components: components, disabled: Boolean(props.disableNavigation), onChange: handleMonthChange(calendarMonth.date), options: dropdownMonths, style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Dropdown], value: dateLib.getMonth(calendarMonth.date) })) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null, formatMonthDropdown(calendarMonth.date, dateLib))),
                            captionLayout === "dropdown" ||
                                captionLayout === "dropdown-years" ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.YearsDropdown, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.YearsDropdown], "aria-label": labelYearDropdown(dateLib.options), classNames: classNames, components: components, disabled: Boolean(props.disableNavigation), onChange: handleYearChange(calendarMonth.date), options: dropdownYears, style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Dropdown], value: dateLib.getYear(calendarMonth.date) })) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null, formatYearDropdown(calendarMonth.date, dateLib))),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { role: "status", "aria-live": "polite", style: {
                                    border: 0,
                                    clip: "rect(0 0 0 0)",
                                    height: "1px",
                                    margin: "-1px",
                                    overflow: "hidden",
                                    padding: 0,
                                    position: "absolute",
                                    width: "1px",
                                    whiteSpace: "nowrap",
                                    wordWrap: "normal"
                                } }, formatCaption(calendarMonth.date, dateLib.options, dateLib)))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.CaptionLabel, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.CaptionLabel], role: "status", "aria-live": "polite" }, formatCaption(calendarMonth.date, dateLib.options, dateLib)))),
                        navLayout === "around" &&
                            !props.hideNavigation &&
                            displayIndex === numberOfMonths - 1 && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.NextMonthButton, { type: "button", className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.NextMonthButton], tabIndex: nextMonth ? undefined : -1, "aria-disabled": nextMonth ? undefined : true, "aria-label": labelNext(nextMonth), onClick: handleNextClick, "data-animated-button": props.animate ? "true" : undefined },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Chevron, { disabled: nextMonth ? undefined : true, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Chevron], orientation: props.dir === "rtl" ? "left" : "right" }))),
                        displayIndex === numberOfMonths - 1 &&
                            navLayout === "after" &&
                            !props.hideNavigation && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Nav, { "data-animated-nav": props.animate ? "true" : undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Nav], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Nav], "aria-label": labelNav(), onPreviousClick: handlePreviousClick, onNextClick: handleNextClick, previousMonth: previousMonth, nextMonth: nextMonth })),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.MonthGrid, { role: "grid", "aria-multiselectable": mode === "multiple" || mode === "range", "aria-label": labelGrid(calendarMonth.date, dateLib.options, dateLib) ||
                                undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.MonthGrid], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.MonthGrid] },
                            !props.hideWeekdays && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Weekdays, { "data-animated-weekdays": props.animate ? "true" : undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Weekdays], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Weekdays] },
                                showWeekNumber && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.WeekNumberHeader, { "aria-label": labelWeekNumberHeader(dateLib.options), className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.WeekNumberHeader], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.WeekNumberHeader], scope: "col" }, formatWeekNumberHeader())),
                                weekdays.map((weekday, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Weekday, { "aria-label": labelWeekday(weekday, dateLib.options, dateLib), className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Weekday], key: i, style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Weekday], scope: "col" }, formatWeekdayName(weekday, dateLib.options, dateLib)))))),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Weeks, { "data-animated-weeks": props.animate ? "true" : undefined, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Weeks], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Weeks] }, calendarMonth.weeks.map((week, weekIndex) => {
                                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Week, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Week], key: week.weekNumber, style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Week], week: week },
                                    showWeekNumber && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.WeekNumber, { week: week, style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.WeekNumber], "aria-label": labelWeekNumber(week.weekNumber, {
                                            locale
                                        }), className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.WeekNumber], scope: "row", role: "rowheader" }, formatWeekNumber(week.weekNumber, dateLib))),
                                    week.days.map((day) => {
                                        const { date } = day;
                                        const modifiers = getModifiers(day);
                                        modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_2__.DayFlag.focused] =
                                            !modifiers.hidden &&
                                                Boolean(focused?.isEqualTo(day));
                                        modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_2__.SelectionState.selected] =
                                            isSelected?.(date) || modifiers.selected;
                                        if ((0,_utils_typeguards_js__WEBPACK_IMPORTED_MODULE_22__.isDateRange)(selectedValue)) {
                                            // add range modifiers
                                            const { from, to } = selectedValue;
                                            modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_2__.SelectionState.range_start] = Boolean(from && to && dateLib.isSameDay(date, from));
                                            modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_2__.SelectionState.range_end] = Boolean(from && to && dateLib.isSameDay(date, to));
                                            modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_2__.SelectionState.range_middle] =
                                                (0,_utils_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_21__.rangeIncludesDate)(selectedValue, date, true, dateLib);
                                        }
                                        const style = (0,_helpers_getStyleForModifiers_js__WEBPACK_IMPORTED_MODULE_12__.getStyleForModifiers)(modifiers, styles, props.modifiersStyles);
                                        const className = (0,_helpers_getClassNamesForModifiers_js__WEBPACK_IMPORTED_MODULE_6__.getClassNamesForModifiers)(modifiers, classNames, props.modifiersClassNames);
                                        const ariaLabel = !isInteractive && !modifiers.hidden
                                            ? labelGridcell(date, modifiers, dateLib.options, dateLib)
                                            : undefined;
                                        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Day, { key: `${dateLib.format(date, "yyyy-MM-dd")}_${dateLib.format(day.displayMonth, "yyyy-MM")}`, day: day, modifiers: modifiers, className: className.join(" "), style: style, role: "gridcell", "aria-selected": modifiers.selected || undefined, "aria-label": ariaLabel, "data-day": dateLib.format(date, "yyyy-MM-dd"), "data-month": day.outside
                                                ? dateLib.format(date, "yyyy-MM")
                                                : undefined, "data-selected": modifiers.selected || undefined, "data-disabled": modifiers.disabled || undefined, "data-hidden": modifiers.hidden || undefined, "data-outside": day.outside || undefined, "data-focused": modifiers.focused || undefined, "data-today": modifiers.today || undefined }, !modifiers.hidden && isInteractive ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.DayButton, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.DayButton], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.DayButton], type: "button", day: day, modifiers: modifiers, disabled: modifiers.disabled || undefined, tabIndex: isFocusTarget(day) ? 0 : -1, "aria-label": labelDayButton(date, modifiers, dateLib.options, dateLib), onClick: handleDayClick(day, modifiers), onBlur: handleDayBlur(day, modifiers), onFocus: handleDayFocus(day, modifiers), onKeyDown: handleDayKeyDown(day, modifiers), onMouseEnter: handleDayMouseEnter(day, modifiers), onMouseLeave: handleDayMouseLeave(day, modifiers) }, formatDay(date, dateLib.options, dateLib))) : (!modifiers.hidden &&
                                            formatDay(day.date, dateLib.options, dateLib))));
                                    })));
                            })))));
                })),
            props.footer && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Footer, { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Footer], style: styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_2__.UI.Footer], role: "status", "aria-live": "polite" }, props.footer)))));
}
//# sourceMappingURL=DayPicker.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/UI.js":
/*!******************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/UI.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Animation: () => (/* binding */ Animation),
/* harmony export */   DayFlag: () => (/* binding */ DayFlag),
/* harmony export */   SelectionState: () => (/* binding */ SelectionState),
/* harmony export */   UI: () => (/* binding */ UI)
/* harmony export */ });
/**
 * Enum representing the UI elements composing DayPicker. These elements are
 * mapped to {@link CustomComponents}, {@link ClassNames}, and {@link Styles}.
 *
 * Some elements are extended by flags and modifiers.
 */
var UI;
(function (UI) {
    /** The root component displaying the months and the navigation bar. */
    UI["Root"] = "root";
    /** The Chevron SVG element used by navigation buttons and dropdowns. */
    UI["Chevron"] = "chevron";
    /**
     * The grid cell with the day's date. Extended by {@link DayFlag} and
     * {@link SelectionState}.
     */
    UI["Day"] = "day";
    /** The button containing the formatted day's date, inside the grid cell. */
    UI["DayButton"] = "day_button";
    /** The caption label of the month (when not showing the dropdown navigation). */
    UI["CaptionLabel"] = "caption_label";
    /** The container of the dropdown navigation (when enabled). */
    UI["Dropdowns"] = "dropdowns";
    /** The dropdown element to select for years and months. */
    UI["Dropdown"] = "dropdown";
    /** The container element of the dropdown. */
    UI["DropdownRoot"] = "dropdown_root";
    /** The root element of the footer. */
    UI["Footer"] = "footer";
    /** The month grid. */
    UI["MonthGrid"] = "month_grid";
    /** Contains the dropdown navigation or the caption label. */
    UI["MonthCaption"] = "month_caption";
    /** The dropdown with the months. */
    UI["MonthsDropdown"] = "months_dropdown";
    /** Wrapper of the month grid. */
    UI["Month"] = "month";
    /** The container of the displayed months. */
    UI["Months"] = "months";
    /** The navigation bar with the previous and next buttons. */
    UI["Nav"] = "nav";
    /**
     * The next month button in the navigation. *
     *
     * @since 9.1.0
     */
    UI["NextMonthButton"] = "button_next";
    /**
     * The previous month button in the navigation.
     *
     * @since 9.1.0
     */
    UI["PreviousMonthButton"] = "button_previous";
    /** The row containing the week. */
    UI["Week"] = "week";
    /** The group of row weeks in a month (`tbody`). */
    UI["Weeks"] = "weeks";
    /** The column header with the weekday. */
    UI["Weekday"] = "weekday";
    /** The row grouping the weekdays in the column headers. */
    UI["Weekdays"] = "weekdays";
    /** The cell containing the week number. */
    UI["WeekNumber"] = "week_number";
    /** The cell header of the week numbers column. */
    UI["WeekNumberHeader"] = "week_number_header";
    /** The dropdown with the years. */
    UI["YearsDropdown"] = "years_dropdown";
})(UI || (UI = {}));
/** Enum representing flags for the {@link UI.Day} element. */
var DayFlag;
(function (DayFlag) {
    /** The day is disabled. */
    DayFlag["disabled"] = "disabled";
    /** The day is hidden. */
    DayFlag["hidden"] = "hidden";
    /** The day is outside the current month. */
    DayFlag["outside"] = "outside";
    /** The day is focused. */
    DayFlag["focused"] = "focused";
    /** The day is today. */
    DayFlag["today"] = "today";
})(DayFlag || (DayFlag = {}));
/**
 * Enum representing selection states that can be applied to the {@link UI.Day}
 * element in selection mode.
 */
var SelectionState;
(function (SelectionState) {
    /** The day is at the end of a selected range. */
    SelectionState["range_end"] = "range_end";
    /** The day is at the middle of a selected range. */
    SelectionState["range_middle"] = "range_middle";
    /** The day is at the start of a selected range. */
    SelectionState["range_start"] = "range_start";
    /** The day is selected. */
    SelectionState["selected"] = "selected";
})(SelectionState || (SelectionState = {}));
/**
 * Enum representing different animation states for transitioning between
 * months.
 */
var Animation;
(function (Animation) {
    /** The entering weeks when they appear before the exiting month. */
    Animation["weeks_before_enter"] = "weeks_before_enter";
    /** The exiting weeks when they disappear before the entering month. */
    Animation["weeks_before_exit"] = "weeks_before_exit";
    /** The entering weeks when they appear after the exiting month. */
    Animation["weeks_after_enter"] = "weeks_after_enter";
    /** The exiting weeks when they disappear after the entering month. */
    Animation["weeks_after_exit"] = "weeks_after_exit";
    /** The entering caption when it appears after the exiting month. */
    Animation["caption_after_enter"] = "caption_after_enter";
    /** The exiting caption when it disappears after the entering month. */
    Animation["caption_after_exit"] = "caption_after_exit";
    /** The entering caption when it appears before the exiting month. */
    Animation["caption_before_enter"] = "caption_before_enter";
    /** The exiting caption when it disappears before the entering month. */
    Animation["caption_before_exit"] = "caption_before_exit";
})(Animation || (Animation = {}));
//# sourceMappingURL=UI.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/classes/CalendarDay.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/classes/CalendarDay.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CalendarDay: () => (/* binding */ CalendarDay)
/* harmony export */ });
/* harmony import */ var _DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Represents a day displayed in the calendar.
 *
 * In DayPicker, a `CalendarDay` is a wrapper around a `Date` object that
 * provides additional information about the day, such as whether it belongs to
 * the displayed month.
 */
class CalendarDay {
    constructor(date, displayMonth, dateLib = _DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
        this.date = date;
        this.displayMonth = displayMonth;
        this.outside = Boolean(displayMonth && !dateLib.isSameMonth(date, displayMonth));
        this.dateLib = dateLib;
    }
    /**
     * Checks if this day is equal to another `CalendarDay`, considering both the
     * date and the displayed month.
     *
     * @param day The `CalendarDay` to compare with.
     * @returns `true` if the days are equal, otherwise `false`.
     */
    isEqualTo(day) {
        return (this.dateLib.isSameDay(day.date, this.date) &&
            this.dateLib.isSameMonth(day.displayMonth, this.displayMonth));
    }
}
//# sourceMappingURL=CalendarDay.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/classes/CalendarMonth.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/classes/CalendarMonth.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CalendarMonth: () => (/* binding */ CalendarMonth)
/* harmony export */ });
/**
 * Represents a month in a calendar year.
 *
 * A `CalendarMonth` contains the weeks within the month and the date of the
 * month.
 */
class CalendarMonth {
    constructor(month, weeks) {
        this.date = month;
        this.weeks = weeks;
    }
}
//# sourceMappingURL=CalendarMonth.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/classes/CalendarWeek.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/classes/CalendarWeek.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CalendarWeek: () => (/* binding */ CalendarWeek)
/* harmony export */ });
/**
 * Represents a week in a calendar month.
 *
 * A `CalendarWeek` contains the days within the week and the week number.
 */
class CalendarWeek {
    constructor(weekNumber, days) {
        this.days = days;
        this.weekNumber = weekNumber;
    }
}
//# sourceMappingURL=CalendarWeek.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/classes/DateLib.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateLib: () => (/* binding */ DateLib),
/* harmony export */   dateLib: () => (/* binding */ dateLib),
/* harmony export */   defaultDateLib: () => (/* binding */ defaultDateLib),
/* harmony export */   defaultLocale: () => (/* reexport safe */ date_fns_locale_en_US__WEBPACK_IMPORTED_MODULE_32__.enUS)
/* harmony export */ });
/* harmony import */ var _date_fns_tz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @date-fns/tz */ "./node_modules/@date-fns/tz/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addDays.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addMonths.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addWeeks.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/addYears.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInCalendarDays.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/differenceInCalendarMonths.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/eachMonthOfInterval.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfISOWeek.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfMonth.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfWeek.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/endOfYear.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/format.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/getISOWeek.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/getMonth.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/getWeek.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/getYear.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isAfter.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isBefore.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isDate.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isSameDay.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isSameMonth.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/isSameYear.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/max.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/min.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/setMonth.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/setYear.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfDay.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfISOWeek.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfMonth.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfWeek.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/startOfYear.js");
/* harmony import */ var date_fns_locale_en_US__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns/locale/en-US */ "./node_modules/date-fns/locale/en-US.js");
/* harmony import */ var _helpers_endOfBroadcastWeek_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../helpers/endOfBroadcastWeek.js */ "./node_modules/react-day-picker/dist/esm/helpers/endOfBroadcastWeek.js");
/* harmony import */ var _helpers_startOfBroadcastWeek_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../helpers/startOfBroadcastWeek.js */ "./node_modules/react-day-picker/dist/esm/helpers/startOfBroadcastWeek.js");





/**
 * A wrapper class around [date-fns](http://date-fns.org) that provides utility
 * methods for date manipulation and formatting.
 *
 * @since 9.2.0
 * @example
 *   const dateLib = new DateLib({ locale: es });
 *   const newDate = dateLib.addDays(new Date(), 5);
 */
class DateLib {
    /**
     * Creates an instance of `DateLib`.
     *
     * @param options Configuration options for the date library.
     * @param overrides Custom overrides for the date library functions.
     */
    constructor(options, overrides) {
        /**
         * Reference to the built-in Date constructor.
         *
         * @deprecated Use `newDate()` or `today()`.
         */
        this.Date = Date;
        /**
         * Creates a new `Date` object representing today's date.
         *
         * @since 9.5.0
         * @returns A `Date` object for today's date.
         */
        this.today = () => {
            if (this.overrides?.today) {
                return this.overrides.today();
            }
            if (this.options.timeZone) {
                return _date_fns_tz__WEBPACK_IMPORTED_MODULE_0__.TZDate.tz(this.options.timeZone);
            }
            return new this.Date();
        };
        /**
         * Creates a new `Date` object with the specified year, month, and day.
         *
         * @since 9.5.0
         * @param year The year.
         * @param monthIndex The month (0-11).
         * @param date The day of the month.
         * @returns A new `Date` object.
         */
        this.newDate = (year, monthIndex, date) => {
            if (this.overrides?.newDate) {
                return this.overrides.newDate(year, monthIndex, date);
            }
            if (this.options.timeZone) {
                return new _date_fns_tz__WEBPACK_IMPORTED_MODULE_0__.TZDate(year, monthIndex, date, this.options.timeZone);
            }
            return new Date(year, monthIndex, date);
        };
        /**
         * Adds the specified number of days to the given date.
         *
         * @param date The date to add days to.
         * @param amount The number of days to add.
         * @returns The new date with the days added.
         */
        this.addDays = (date, amount) => {
            return this.overrides?.addDays
                ? this.overrides.addDays(date, amount)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.addDays)(date, amount);
        };
        /**
         * Adds the specified number of months to the given date.
         *
         * @param date The date to add months to.
         * @param amount The number of months to add.
         * @returns The new date with the months added.
         */
        this.addMonths = (date, amount) => {
            return this.overrides?.addMonths
                ? this.overrides.addMonths(date, amount)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.addMonths)(date, amount);
        };
        /**
         * Adds the specified number of weeks to the given date.
         *
         * @param date The date to add weeks to.
         * @param amount The number of weeks to add.
         * @returns The new date with the weeks added.
         */
        this.addWeeks = (date, amount) => {
            return this.overrides?.addWeeks
                ? this.overrides.addWeeks(date, amount)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.addWeeks)(date, amount);
        };
        /**
         * Adds the specified number of years to the given date.
         *
         * @param date The date to add years to.
         * @param amount The number of years to add.
         * @returns The new date with the years added.
         */
        this.addYears = (date, amount) => {
            return this.overrides?.addYears
                ? this.overrides.addYears(date, amount)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_4__.addYears)(date, amount);
        };
        /**
         * Returns the number of calendar days between the given dates.
         *
         * @param dateLeft The later date.
         * @param dateRight The earlier date.
         * @returns The number of calendar days between the dates.
         */
        this.differenceInCalendarDays = (dateLeft, dateRight) => {
            return this.overrides?.differenceInCalendarDays
                ? this.overrides.differenceInCalendarDays(dateLeft, dateRight)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInCalendarDays)(dateLeft, dateRight);
        };
        /**
         * Returns the number of calendar months between the given dates.
         *
         * @param dateLeft The later date.
         * @param dateRight The earlier date.
         * @returns The number of calendar months between the dates.
         */
        this.differenceInCalendarMonths = (dateLeft, dateRight) => {
            return this.overrides?.differenceInCalendarMonths
                ? this.overrides.differenceInCalendarMonths(dateLeft, dateRight)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.differenceInCalendarMonths)(dateLeft, dateRight);
        };
        /**
         * Returns the months between the given dates.
         *
         * @param interval The interval to get the months for.
         */
        this.eachMonthOfInterval = (interval) => {
            return this.overrides?.eachMonthOfInterval
                ? this.overrides.eachMonthOfInterval(interval)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.eachMonthOfInterval)(interval);
        };
        /**
         * Returns the end of the broadcast week for the given date.
         *
         * @param date The original date.
         * @returns The end of the broadcast week.
         */
        this.endOfBroadcastWeek = (date) => {
            return this.overrides?.endOfBroadcastWeek
                ? this.overrides.endOfBroadcastWeek(date)
                : (0,_helpers_endOfBroadcastWeek_js__WEBPACK_IMPORTED_MODULE_33__.endOfBroadcastWeek)(date, this);
        };
        /**
         * Returns the end of the ISO week for the given date.
         *
         * @param date The original date.
         * @returns The end of the ISO week.
         */
        this.endOfISOWeek = (date) => {
            return this.overrides?.endOfISOWeek
                ? this.overrides.endOfISOWeek(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.endOfISOWeek)(date);
        };
        /**
         * Returns the end of the month for the given date.
         *
         * @param date The original date.
         * @returns The end of the month.
         */
        this.endOfMonth = (date) => {
            return this.overrides?.endOfMonth
                ? this.overrides.endOfMonth(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.endOfMonth)(date);
        };
        /**
         * Returns the end of the week for the given date.
         *
         * @param date The original date.
         * @returns The end of the week.
         */
        this.endOfWeek = (date, options) => {
            return this.overrides?.endOfWeek
                ? this.overrides.endOfWeek(date, options)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.endOfWeek)(date, this.options);
        };
        /**
         * Returns the end of the year for the given date.
         *
         * @param date The original date.
         * @returns The end of the year.
         */
        this.endOfYear = (date) => {
            return this.overrides?.endOfYear
                ? this.overrides.endOfYear(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.endOfYear)(date);
        };
        /**
         * Formats the given date using the specified format string.
         *
         * @param date The date to format.
         * @param formatStr The format string.
         * @returns The formatted date string.
         */
        this.format = (date, formatStr, options) => {
            const formatted = this.overrides?.format
                ? this.overrides.format(date, formatStr, this.options)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(date, formatStr, this.options);
            if (this.options.numerals && this.options.numerals !== "latn") {
                return this.replaceDigits(formatted);
            }
            return formatted;
        };
        /**
         * Returns the ISO week number for the given date.
         *
         * @param date The date to get the ISO week number for.
         * @returns The ISO week number.
         */
        this.getISOWeek = (date) => {
            return this.overrides?.getISOWeek
                ? this.overrides.getISOWeek(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_13__.getISOWeek)(date);
        };
        /**
         * Returns the month of the given date.
         *
         * @param date The date to get the month for.
         * @returns The month.
         */
        this.getMonth = (date, options) => {
            return this.overrides?.getMonth
                ? this.overrides.getMonth(date, this.options)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.getMonth)(date, this.options);
        };
        /**
         * Returns the year of the given date.
         *
         * @param date The date to get the year for.
         * @returns The year.
         */
        this.getYear = (date, options) => {
            return this.overrides?.getYear
                ? this.overrides.getYear(date, this.options)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_16__.getYear)(date, this.options);
        };
        /**
         * Returns the local week number for the given date.
         *
         * @param date The date to get the week number for.
         * @returns The week number.
         */
        this.getWeek = (date, options) => {
            return this.overrides?.getWeek
                ? this.overrides.getWeek(date, this.options)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.getWeek)(date, this.options);
        };
        /**
         * Checks if the first date is after the second date.
         *
         * @param date The date to compare.
         * @param dateToCompare The date to compare with.
         * @returns True if the first date is after the second date.
         */
        this.isAfter = (date, dateToCompare) => {
            return this.overrides?.isAfter
                ? this.overrides.isAfter(date, dateToCompare)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.isAfter)(date, dateToCompare);
        };
        /**
         * Checks if the first date is before the second date.
         *
         * @param date The date to compare.
         * @param dateToCompare The date to compare with.
         * @returns True if the first date is before the second date.
         */
        this.isBefore = (date, dateToCompare) => {
            return this.overrides?.isBefore
                ? this.overrides.isBefore(date, dateToCompare)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_18__.isBefore)(date, dateToCompare);
        };
        /**
         * Checks if the given value is a Date object.
         *
         * @param value The value to check.
         * @returns True if the value is a Date object.
         */
        this.isDate = (value) => {
            return this.overrides?.isDate
                ? this.overrides.isDate(value)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_19__.isDate)(value);
        };
        /**
         * Checks if the given dates are on the same day.
         *
         * @param dateLeft The first date to compare.
         * @param dateRight The second date to compare.
         * @returns True if the dates are on the same day.
         */
        this.isSameDay = (dateLeft, dateRight) => {
            return this.overrides?.isSameDay
                ? this.overrides.isSameDay(dateLeft, dateRight)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_20__.isSameDay)(dateLeft, dateRight);
        };
        /**
         * Checks if the given dates are in the same month.
         *
         * @param dateLeft The first date to compare.
         * @param dateRight The second date to compare.
         * @returns True if the dates are in the same month.
         */
        this.isSameMonth = (dateLeft, dateRight) => {
            return this.overrides?.isSameMonth
                ? this.overrides.isSameMonth(dateLeft, dateRight)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_21__.isSameMonth)(dateLeft, dateRight);
        };
        /**
         * Checks if the given dates are in the same year.
         *
         * @param dateLeft The first date to compare.
         * @param dateRight The second date to compare.
         * @returns True if the dates are in the same year.
         */
        this.isSameYear = (dateLeft, dateRight) => {
            return this.overrides?.isSameYear
                ? this.overrides.isSameYear(dateLeft, dateRight)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_22__.isSameYear)(dateLeft, dateRight);
        };
        /**
         * Returns the latest date in the given array of dates.
         *
         * @param dates The array of dates to compare.
         * @returns The latest date.
         */
        this.max = (dates) => {
            return this.overrides?.max ? this.overrides.max(dates) : (0,date_fns__WEBPACK_IMPORTED_MODULE_23__.max)(dates);
        };
        /**
         * Returns the earliest date in the given array of dates.
         *
         * @param dates The array of dates to compare.
         * @returns The earliest date.
         */
        this.min = (dates) => {
            return this.overrides?.min ? this.overrides.min(dates) : (0,date_fns__WEBPACK_IMPORTED_MODULE_24__.min)(dates);
        };
        /**
         * Sets the month of the given date.
         *
         * @param date The date to set the month on.
         * @param month The month to set (0-11).
         * @returns The new date with the month set.
         */
        this.setMonth = (date, month) => {
            return this.overrides?.setMonth
                ? this.overrides.setMonth(date, month)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_25__.setMonth)(date, month);
        };
        /**
         * Sets the year of the given date.
         *
         * @param date The date to set the year on.
         * @param year The year to set.
         * @returns The new date with the year set.
         */
        this.setYear = (date, year) => {
            return this.overrides?.setYear
                ? this.overrides.setYear(date, year)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.setYear)(date, year);
        };
        /**
         * Returns the start of the broadcast week for the given date.
         *
         * @param date The original date.
         * @returns The start of the broadcast week.
         */
        this.startOfBroadcastWeek = (date, dateLib) => {
            return this.overrides?.startOfBroadcastWeek
                ? this.overrides.startOfBroadcastWeek(date, this)
                : (0,_helpers_startOfBroadcastWeek_js__WEBPACK_IMPORTED_MODULE_34__.startOfBroadcastWeek)(date, this);
        };
        /**
         * Returns the start of the day for the given date.
         *
         * @param date The original date.
         * @returns The start of the day.
         */
        this.startOfDay = (date) => {
            return this.overrides?.startOfDay
                ? this.overrides.startOfDay(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_27__.startOfDay)(date);
        };
        /**
         * Returns the start of the ISO week for the given date.
         *
         * @param date The original date.
         * @returns The start of the ISO week.
         */
        this.startOfISOWeek = (date) => {
            return this.overrides?.startOfISOWeek
                ? this.overrides.startOfISOWeek(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_28__.startOfISOWeek)(date);
        };
        /**
         * Returns the start of the month for the given date.
         *
         * @param date The original date.
         * @returns The start of the month.
         */
        this.startOfMonth = (date) => {
            return this.overrides?.startOfMonth
                ? this.overrides.startOfMonth(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_29__.startOfMonth)(date);
        };
        /**
         * Returns the start of the week for the given date.
         *
         * @param date The original date.
         * @returns The start of the week.
         */
        this.startOfWeek = (date, options) => {
            return this.overrides?.startOfWeek
                ? this.overrides.startOfWeek(date, this.options)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_30__.startOfWeek)(date, this.options);
        };
        /**
         * Returns the start of the year for the given date.
         *
         * @param date The original date.
         * @returns The start of the year.
         */
        this.startOfYear = (date) => {
            return this.overrides?.startOfYear
                ? this.overrides.startOfYear(date)
                : (0,date_fns__WEBPACK_IMPORTED_MODULE_31__.startOfYear)(date);
        };
        this.options = { locale: date_fns_locale_en_US__WEBPACK_IMPORTED_MODULE_32__.enUS, ...options };
        this.overrides = overrides;
    }
    /**
     * Generates a mapping of Arabic digits (0-9) to the target numbering system
     * digits.
     *
     * @since 9.5.0
     * @returns A record mapping Arabic digits to the target numerals.
     */
    getDigitMap() {
        const { numerals = "latn" } = this.options;
        // Use Intl.NumberFormat to create a formatter with the specified numbering system
        const formatter = new Intl.NumberFormat("en-US", {
            numberingSystem: numerals
        });
        // Map Arabic digits (0-9) to the target numerals
        const digitMap = {};
        for (let i = 0; i < 10; i++) {
            digitMap[i.toString()] = formatter.format(i);
        }
        return digitMap;
    }
    /**
     * Replaces Arabic digits in a string with the target numbering system digits.
     *
     * @since 9.5.0
     * @param input The string containing Arabic digits.
     * @returns The string with digits replaced.
     */
    replaceDigits(input) {
        const digitMap = this.getDigitMap();
        return input.replace(/\d/g, (digit) => digitMap[digit] || digit);
    }
    /**
     * Formats a number using the configured numbering system.
     *
     * @since 9.5.0
     * @param value The number to format.
     * @returns The formatted number as a string.
     */
    formatNumber(value) {
        return this.replaceDigits(value.toString());
    }
}
/** The default locale (English). */

/**
 * The default date library with English locale.
 *
 * @since 9.2.0
 */
const defaultDateLib = new DateLib();
/**
 * @ignore
 * @deprecated Use `defaultDateLib`.
 */
const dateLib = defaultDateLib;
//# sourceMappingURL=DateLib.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Button.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Button.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the button elements in the calendar.
 *
 * @private
 * @deprecated Use `PreviousMonthButton` or `@link NextMonthButton` instead.
 */
function Button(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { ...props });
}
//# sourceMappingURL=Button.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/CaptionLabel.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/CaptionLabel.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CaptionLabel: () => (/* binding */ CaptionLabel)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the label in the month caption.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function CaptionLabel(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { ...props });
}
//# sourceMappingURL=CaptionLabel.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Chevron.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Chevron.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chevron: () => (/* binding */ Chevron)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the chevron icon used in the navigation buttons and dropdowns.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Chevron(props) {
    const { size = 24, orientation = "left", className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", { className: className, width: size, height: size, viewBox: "0 0 24 24" },
        orientation === "up" && (react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { points: "6.77 17 12.5 11.43 18.24 17 20 15.28 12.5 8 5 15.28" })),
        orientation === "down" && (react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { points: "6.77 8 12.5 13.57 18.24 8 20 9.72 12.5 17 5 9.72" })),
        orientation === "left" && (react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { points: "16 18.112 9.81111111 12 16 5.87733333 14.0888889 4 6 12 14.0888889 20" })),
        orientation === "right" && (react__WEBPACK_IMPORTED_MODULE_0__.createElement("polygon", { points: "8 18.112 14.18888889 12 8 5.87733333 9.91111111 4 18 12 9.91111111 20" }))));
}
//# sourceMappingURL=Chevron.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Day.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Day.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Day: () => (/* binding */ Day)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a grid cell for a specific day in the calendar.
 *
 * Handles interaction and focus for the day. If you only need to change the
 * content of the day cell, consider swapping the `DayButton` component
 * instead.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Day(props) {
    const { day, modifiers, ...tdProps } = props;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", { ...tdProps });
}
//# sourceMappingURL=Day.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/DayButton.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/DayButton.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DayButton: () => (/* binding */ DayButton)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a button for a specific day in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function DayButton(props) {
    const { day, modifiers, ...buttonProps } = props;
    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (modifiers.focused)
            ref.current?.focus();
    }, [modifiers.focused]);
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { ref: ref, ...buttonProps });
}
//# sourceMappingURL=DayButton.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Dropdown.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Dropdown.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dropdown: () => (/* binding */ Dropdown)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");


/**
 * Render a dropdown component for navigation in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Dropdown(props) {
    const { options, className, components, classNames, ...selectProps } = props;
    const cssClassSelect = [classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.Dropdown], className].join(" ");
    const selectedOption = options?.find(({ value }) => value === selectProps.value);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "data-disabled": selectProps.disabled, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.DropdownRoot] },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Select, { className: cssClassSelect, ...selectProps }, options?.map(({ value, label, disabled }) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Option, { key: value, value: value, disabled: disabled }, label)))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.CaptionLabel], "aria-hidden": true },
            selectedOption?.label,
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Chevron, { orientation: "down", size: 18, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.Chevron] }))));
}
//# sourceMappingURL=Dropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/DropdownNav.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/DropdownNav.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownNav: () => (/* binding */ DropdownNav)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the navigation dropdowns for the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function DropdownNav(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ...props });
}
//# sourceMappingURL=DropdownNav.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Footer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Footer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Footer: () => (/* binding */ Footer)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the footer of the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Footer(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ...props });
}
//# sourceMappingURL=Footer.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Month.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Month.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Month: () => (/* binding */ Month)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the grid with the weekday header row and the weeks for a specific
 * month.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Month(props) {
    const { calendarMonth, displayIndex, ...divProps } = props;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ...divProps }, props.children);
}
//# sourceMappingURL=Month.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/MonthCaption.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/MonthCaption.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MonthCaption: () => (/* binding */ MonthCaption)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the caption for a month in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function MonthCaption(props) {
    const { calendarMonth, displayIndex, ...divProps } = props;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ...divProps });
}
//# sourceMappingURL=MonthCaption.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/MonthGrid.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/MonthGrid.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MonthGrid: () => (/* binding */ MonthGrid)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the grid of days for a specific month.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function MonthGrid(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { ...props });
}
//# sourceMappingURL=MonthGrid.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Months.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Months.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Months: () => (/* binding */ Months)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a container wrapping the month grids.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Months(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ...props });
}
//# sourceMappingURL=Months.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/MonthsDropdown.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/MonthsDropdown.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MonthsDropdown: () => (/* binding */ MonthsDropdown)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../useDayPicker.js */ "./node_modules/react-day-picker/dist/esm/useDayPicker.js");


/**
 * Render a dropdown to navigate between months in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function MonthsDropdown(props) {
    const { components } = (0,_useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__.useDayPicker)();
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Dropdown, { ...props });
}
//# sourceMappingURL=MonthsDropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Nav.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Nav.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Nav: () => (/* binding */ Nav)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");
/* harmony import */ var _useDayPicker_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../useDayPicker.js */ "./node_modules/react-day-picker/dist/esm/useDayPicker.js");



/**
 * Render the navigation toolbar with buttons to navigate between months.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Nav(props) {
    const { onPreviousClick, onNextClick, previousMonth, nextMonth, ...navProps } = props;
    const { components, classNames, labels: { labelPrevious, labelNext } } = (0,_useDayPicker_js__WEBPACK_IMPORTED_MODULE_2__.useDayPicker)();
    const handleNextClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
        if (nextMonth) {
            onNextClick?.(e);
        }
    }, [nextMonth, onNextClick]);
    const handlePreviousClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
        if (previousMonth) {
            onPreviousClick?.(e);
        }
    }, [previousMonth, onPreviousClick]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("nav", { ...navProps },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.PreviousMonthButton, { type: "button", className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.PreviousMonthButton], tabIndex: previousMonth ? undefined : -1, "aria-disabled": previousMonth ? undefined : true, "aria-label": labelPrevious(previousMonth), onClick: handlePreviousClick },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Chevron, { disabled: previousMonth ? undefined : true, className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.Chevron], orientation: "left" })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.NextMonthButton, { type: "button", className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.NextMonthButton], tabIndex: nextMonth ? undefined : -1, "aria-disabled": nextMonth ? undefined : true, "aria-label": labelNext(nextMonth), onClick: handleNextClick },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Chevron, { disabled: nextMonth ? undefined : true, orientation: "right", className: classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.UI.Chevron] }))));
}
//# sourceMappingURL=Nav.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/NextMonthButton.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/NextMonthButton.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NextMonthButton: () => (/* binding */ NextMonthButton)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../useDayPicker.js */ "./node_modules/react-day-picker/dist/esm/useDayPicker.js");


/**
 * Render the button to navigate to the next month in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function NextMonthButton(props) {
    const { components } = (0,_useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__.useDayPicker)();
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Button, { ...props });
}
//# sourceMappingURL=NextMonthButton.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Option.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Option.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Option: () => (/* binding */ Option)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render an `option` element.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Option(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { ...props });
}
//# sourceMappingURL=Option.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/PreviousMonthButton.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/PreviousMonthButton.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PreviousMonthButton: () => (/* binding */ PreviousMonthButton)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../useDayPicker.js */ "./node_modules/react-day-picker/dist/esm/useDayPicker.js");


/**
 * Render the button to navigate to the previous month in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function PreviousMonthButton(props) {
    const { components } = (0,_useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__.useDayPicker)();
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Button, { ...props });
}
//# sourceMappingURL=PreviousMonthButton.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Root.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Root.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Root: () => (/* binding */ Root)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the root element of the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Root(props) {
    const { rootRef, ...rest } = props;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ...rest, ref: rootRef });
}
//# sourceMappingURL=Root.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Select.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Select.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Select: () => (/* binding */ Select)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a `select` element.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Select(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { ...props });
}
//# sourceMappingURL=Select.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Week.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Week.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Week: () => (/* binding */ Week)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a table row representing a week in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Week(props) {
    const { week, ...trProps } = props;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { ...trProps });
}
//# sourceMappingURL=Week.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/WeekNumber.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/WeekNumber.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WeekNumber: () => (/* binding */ WeekNumber)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a table cell displaying the number of the week.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function WeekNumber(props) {
    const { week, ...thProps } = props;
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", { ...thProps });
}
//# sourceMappingURL=WeekNumber.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/WeekNumberHeader.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/WeekNumberHeader.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WeekNumberHeader: () => (/* binding */ WeekNumberHeader)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the header cell for the week numbers column.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function WeekNumberHeader(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", { ...props });
}
//# sourceMappingURL=WeekNumberHeader.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Weekday.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Weekday.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Weekday: () => (/* binding */ Weekday)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render a table header cell with the name of a weekday (e.g., "Mo", "Tu").
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Weekday(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", { ...props });
}
//# sourceMappingURL=Weekday.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Weekdays.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Weekdays.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Weekdays: () => (/* binding */ Weekdays)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the table row containing the weekday names.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Weekdays(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("thead", { "aria-hidden": true },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { ...props })));
}
//# sourceMappingURL=Weekdays.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/Weeks.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/Weeks.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Weeks: () => (/* binding */ Weeks)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * Render the container for the weeks in the month grid.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function Weeks(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", { ...props });
}
//# sourceMappingURL=Weeks.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/YearsDropdown.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/YearsDropdown.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   YearsDropdown: () => (/* binding */ YearsDropdown)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../useDayPicker.js */ "./node_modules/react-day-picker/dist/esm/useDayPicker.js");


/**
 * Render a dropdown to navigate between years in the calendar.
 *
 * @group Components
 * @see https://daypicker.dev/guides/custom-components
 */
function YearsDropdown(props) {
    const { components } = (0,_useDayPicker_js__WEBPACK_IMPORTED_MODULE_1__.useDayPicker)();
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(components.Dropdown, { ...props });
}
//# sourceMappingURL=YearsDropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/components/custom-components.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/components/custom-components.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* reexport safe */ _Button_js__WEBPACK_IMPORTED_MODULE_0__.Button),
/* harmony export */   CaptionLabel: () => (/* reexport safe */ _CaptionLabel_js__WEBPACK_IMPORTED_MODULE_1__.CaptionLabel),
/* harmony export */   Chevron: () => (/* reexport safe */ _Chevron_js__WEBPACK_IMPORTED_MODULE_2__.Chevron),
/* harmony export */   Day: () => (/* reexport safe */ _Day_js__WEBPACK_IMPORTED_MODULE_3__.Day),
/* harmony export */   DayButton: () => (/* reexport safe */ _DayButton_js__WEBPACK_IMPORTED_MODULE_4__.DayButton),
/* harmony export */   Dropdown: () => (/* reexport safe */ _Dropdown_js__WEBPACK_IMPORTED_MODULE_5__.Dropdown),
/* harmony export */   DropdownNav: () => (/* reexport safe */ _DropdownNav_js__WEBPACK_IMPORTED_MODULE_6__.DropdownNav),
/* harmony export */   Footer: () => (/* reexport safe */ _Footer_js__WEBPACK_IMPORTED_MODULE_7__.Footer),
/* harmony export */   Month: () => (/* reexport safe */ _Month_js__WEBPACK_IMPORTED_MODULE_8__.Month),
/* harmony export */   MonthCaption: () => (/* reexport safe */ _MonthCaption_js__WEBPACK_IMPORTED_MODULE_9__.MonthCaption),
/* harmony export */   MonthGrid: () => (/* reexport safe */ _MonthGrid_js__WEBPACK_IMPORTED_MODULE_10__.MonthGrid),
/* harmony export */   Months: () => (/* reexport safe */ _Months_js__WEBPACK_IMPORTED_MODULE_11__.Months),
/* harmony export */   MonthsDropdown: () => (/* reexport safe */ _MonthsDropdown_js__WEBPACK_IMPORTED_MODULE_12__.MonthsDropdown),
/* harmony export */   Nav: () => (/* reexport safe */ _Nav_js__WEBPACK_IMPORTED_MODULE_13__.Nav),
/* harmony export */   NextMonthButton: () => (/* reexport safe */ _NextMonthButton_js__WEBPACK_IMPORTED_MODULE_14__.NextMonthButton),
/* harmony export */   Option: () => (/* reexport safe */ _Option_js__WEBPACK_IMPORTED_MODULE_15__.Option),
/* harmony export */   PreviousMonthButton: () => (/* reexport safe */ _PreviousMonthButton_js__WEBPACK_IMPORTED_MODULE_16__.PreviousMonthButton),
/* harmony export */   Root: () => (/* reexport safe */ _Root_js__WEBPACK_IMPORTED_MODULE_17__.Root),
/* harmony export */   Select: () => (/* reexport safe */ _Select_js__WEBPACK_IMPORTED_MODULE_18__.Select),
/* harmony export */   Week: () => (/* reexport safe */ _Week_js__WEBPACK_IMPORTED_MODULE_19__.Week),
/* harmony export */   WeekNumber: () => (/* reexport safe */ _WeekNumber_js__WEBPACK_IMPORTED_MODULE_22__.WeekNumber),
/* harmony export */   WeekNumberHeader: () => (/* reexport safe */ _WeekNumberHeader_js__WEBPACK_IMPORTED_MODULE_23__.WeekNumberHeader),
/* harmony export */   Weekday: () => (/* reexport safe */ _Weekday_js__WEBPACK_IMPORTED_MODULE_20__.Weekday),
/* harmony export */   Weekdays: () => (/* reexport safe */ _Weekdays_js__WEBPACK_IMPORTED_MODULE_21__.Weekdays),
/* harmony export */   Weeks: () => (/* reexport safe */ _Weeks_js__WEBPACK_IMPORTED_MODULE_24__.Weeks),
/* harmony export */   YearsDropdown: () => (/* reexport safe */ _YearsDropdown_js__WEBPACK_IMPORTED_MODULE_25__.YearsDropdown)
/* harmony export */ });
/* harmony import */ var _Button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Button.js */ "./node_modules/react-day-picker/dist/esm/components/Button.js");
/* harmony import */ var _CaptionLabel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CaptionLabel.js */ "./node_modules/react-day-picker/dist/esm/components/CaptionLabel.js");
/* harmony import */ var _Chevron_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chevron.js */ "./node_modules/react-day-picker/dist/esm/components/Chevron.js");
/* harmony import */ var _Day_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Day.js */ "./node_modules/react-day-picker/dist/esm/components/Day.js");
/* harmony import */ var _DayButton_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DayButton.js */ "./node_modules/react-day-picker/dist/esm/components/DayButton.js");
/* harmony import */ var _Dropdown_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Dropdown.js */ "./node_modules/react-day-picker/dist/esm/components/Dropdown.js");
/* harmony import */ var _DropdownNav_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DropdownNav.js */ "./node_modules/react-day-picker/dist/esm/components/DropdownNav.js");
/* harmony import */ var _Footer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Footer.js */ "./node_modules/react-day-picker/dist/esm/components/Footer.js");
/* harmony import */ var _Month_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Month.js */ "./node_modules/react-day-picker/dist/esm/components/Month.js");
/* harmony import */ var _MonthCaption_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MonthCaption.js */ "./node_modules/react-day-picker/dist/esm/components/MonthCaption.js");
/* harmony import */ var _MonthGrid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MonthGrid.js */ "./node_modules/react-day-picker/dist/esm/components/MonthGrid.js");
/* harmony import */ var _Months_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Months.js */ "./node_modules/react-day-picker/dist/esm/components/Months.js");
/* harmony import */ var _MonthsDropdown_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MonthsDropdown.js */ "./node_modules/react-day-picker/dist/esm/components/MonthsDropdown.js");
/* harmony import */ var _Nav_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Nav.js */ "./node_modules/react-day-picker/dist/esm/components/Nav.js");
/* harmony import */ var _NextMonthButton_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./NextMonthButton.js */ "./node_modules/react-day-picker/dist/esm/components/NextMonthButton.js");
/* harmony import */ var _Option_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Option.js */ "./node_modules/react-day-picker/dist/esm/components/Option.js");
/* harmony import */ var _PreviousMonthButton_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./PreviousMonthButton.js */ "./node_modules/react-day-picker/dist/esm/components/PreviousMonthButton.js");
/* harmony import */ var _Root_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Root.js */ "./node_modules/react-day-picker/dist/esm/components/Root.js");
/* harmony import */ var _Select_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Select.js */ "./node_modules/react-day-picker/dist/esm/components/Select.js");
/* harmony import */ var _Week_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Week.js */ "./node_modules/react-day-picker/dist/esm/components/Week.js");
/* harmony import */ var _Weekday_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Weekday.js */ "./node_modules/react-day-picker/dist/esm/components/Weekday.js");
/* harmony import */ var _Weekdays_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Weekdays.js */ "./node_modules/react-day-picker/dist/esm/components/Weekdays.js");
/* harmony import */ var _WeekNumber_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./WeekNumber.js */ "./node_modules/react-day-picker/dist/esm/components/WeekNumber.js");
/* harmony import */ var _WeekNumberHeader_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./WeekNumberHeader.js */ "./node_modules/react-day-picker/dist/esm/components/WeekNumberHeader.js");
/* harmony import */ var _Weeks_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./Weeks.js */ "./node_modules/react-day-picker/dist/esm/components/Weeks.js");
/* harmony import */ var _YearsDropdown_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./YearsDropdown.js */ "./node_modules/react-day-picker/dist/esm/components/YearsDropdown.js");


























//# sourceMappingURL=custom-components.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatCaption.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatCaption.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatCaption: () => (/* binding */ formatCaption),
/* harmony export */   formatMonthCaption: () => (/* binding */ formatMonthCaption)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Formats the caption of the month.
 *
 * @defaultValue `LLLL y` (e.g., "November 2022").
 * @param month The date representing the month.
 * @param options Configuration options for the date library.
 * @param dateLib The date library to use for formatting. If not provided, a new
 *   instance is created.
 * @returns The formatted caption as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatCaption(month, options, dateLib) {
    return (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(month, "LLLL y");
}
/**
 * @private
 * @deprecated Use {@link formatCaption} instead.
 * @group Formatters
 */
const formatMonthCaption = formatCaption;
//# sourceMappingURL=formatCaption.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatDay.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatDay.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatDay: () => (/* binding */ formatDay)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Formats the day date shown in the day cell.
 *
 * @defaultValue `d` (e.g., "1").
 * @param date The date to format.
 * @param options Configuration options for the date library.
 * @param dateLib The date library to use for formatting. If not provided, a new
 *   instance is created.
 * @returns The formatted day as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatDay(date, options, dateLib) {
    return (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(date, "d");
}
//# sourceMappingURL=formatDay.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatMonthDropdown.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatMonthDropdown.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatMonthDropdown: () => (/* binding */ formatMonthDropdown)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Formats the month for the dropdown option label.
 *
 * @defaultValue The localized full month name.
 * @param month The date representing the month.
 * @param dateLib The date library to use for formatting. Defaults to
 *   `defaultDateLib`.
 * @returns The formatted month name as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatMonthDropdown(month, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    return dateLib.format(month, "LLLL");
}
//# sourceMappingURL=formatMonthDropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatWeekNumber.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatWeekNumber.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatWeekNumber: () => (/* binding */ formatWeekNumber)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Formats the week number.
 *
 * @defaultValue The week number as a string, with a leading zero for single-digit numbers.
 * @param weekNumber The week number to format.
 * @param dateLib The date library to use for formatting. Defaults to
 *   `defaultDateLib`.
 * @returns The formatted week number as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatWeekNumber(weekNumber, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    if (weekNumber < 10) {
        return dateLib.formatNumber(`0${weekNumber.toLocaleString()}`);
    }
    return dateLib.formatNumber(`${weekNumber.toLocaleString()}`);
}
//# sourceMappingURL=formatWeekNumber.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatWeekNumberHeader.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatWeekNumberHeader.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatWeekNumberHeader: () => (/* binding */ formatWeekNumberHeader)
/* harmony export */ });
/**
 * Formats the header for the week number column.
 *
 * @defaultValue An empty string `""`.
 * @returns The formatted week number header as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatWeekNumberHeader() {
    return ``;
}
//# sourceMappingURL=formatWeekNumberHeader.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatWeekdayName.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatWeekdayName.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatWeekdayName: () => (/* binding */ formatWeekdayName)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Formats the name of a weekday to be displayed in the weekdays header.
 *
 * @defaultValue `cccccc` (e.g., "Mo" for Monday).
 * @param weekday The date representing the weekday.
 * @param options Configuration options for the date library.
 * @param dateLib The date library to use for formatting. If not provided, a new
 *   instance is created.
 * @returns The formatted weekday name as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatWeekdayName(weekday, options, dateLib) {
    return (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(weekday, "cccccc");
}
//# sourceMappingURL=formatWeekdayName.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/formatYearDropdown.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/formatYearDropdown.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatYearCaption: () => (/* binding */ formatYearCaption),
/* harmony export */   formatYearDropdown: () => (/* binding */ formatYearDropdown)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Formats the year for the dropdown option label.
 *
 * @param year The year to format.
 * @param dateLib The date library to use for formatting. Defaults to
 *   `defaultDateLib`.
 * @returns The formatted year as a string.
 * @group Formatters
 * @see https://daypicker.dev/docs/translation#custom-formatters
 */
function formatYearDropdown(year, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    return dateLib.format(year, "yyyy");
}
/**
 * @private
 * @deprecated Use `formatYearDropdown` instead.
 * @group Formatters
 */
const formatYearCaption = formatYearDropdown;
//# sourceMappingURL=formatYearDropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/formatters/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/formatters/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatCaption: () => (/* reexport safe */ _formatCaption_js__WEBPACK_IMPORTED_MODULE_0__.formatCaption),
/* harmony export */   formatDay: () => (/* reexport safe */ _formatDay_js__WEBPACK_IMPORTED_MODULE_1__.formatDay),
/* harmony export */   formatMonthCaption: () => (/* reexport safe */ _formatCaption_js__WEBPACK_IMPORTED_MODULE_0__.formatMonthCaption),
/* harmony export */   formatMonthDropdown: () => (/* reexport safe */ _formatMonthDropdown_js__WEBPACK_IMPORTED_MODULE_2__.formatMonthDropdown),
/* harmony export */   formatWeekNumber: () => (/* reexport safe */ _formatWeekNumber_js__WEBPACK_IMPORTED_MODULE_3__.formatWeekNumber),
/* harmony export */   formatWeekNumberHeader: () => (/* reexport safe */ _formatWeekNumberHeader_js__WEBPACK_IMPORTED_MODULE_4__.formatWeekNumberHeader),
/* harmony export */   formatWeekdayName: () => (/* reexport safe */ _formatWeekdayName_js__WEBPACK_IMPORTED_MODULE_5__.formatWeekdayName),
/* harmony export */   formatYearCaption: () => (/* reexport safe */ _formatYearDropdown_js__WEBPACK_IMPORTED_MODULE_6__.formatYearCaption),
/* harmony export */   formatYearDropdown: () => (/* reexport safe */ _formatYearDropdown_js__WEBPACK_IMPORTED_MODULE_6__.formatYearDropdown)
/* harmony export */ });
/* harmony import */ var _formatCaption_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatCaption.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatCaption.js");
/* harmony import */ var _formatDay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatDay.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatDay.js");
/* harmony import */ var _formatMonthDropdown_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatMonthDropdown.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatMonthDropdown.js");
/* harmony import */ var _formatWeekNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatWeekNumber.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatWeekNumber.js");
/* harmony import */ var _formatWeekNumberHeader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./formatWeekNumberHeader.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatWeekNumberHeader.js");
/* harmony import */ var _formatWeekdayName_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatWeekdayName.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatWeekdayName.js");
/* harmony import */ var _formatYearDropdown_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./formatYearDropdown.js */ "./node_modules/react-day-picker/dist/esm/formatters/formatYearDropdown.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/calculateFocusTarget.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/calculateFocusTarget.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calculateFocusTarget: () => (/* binding */ calculateFocusTarget)
/* harmony export */ });
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");

var FocusTargetPriority;
(function (FocusTargetPriority) {
    FocusTargetPriority[FocusTargetPriority["Today"] = 0] = "Today";
    FocusTargetPriority[FocusTargetPriority["Selected"] = 1] = "Selected";
    FocusTargetPriority[FocusTargetPriority["LastFocused"] = 2] = "LastFocused";
    FocusTargetPriority[FocusTargetPriority["FocusedModifier"] = 3] = "FocusedModifier";
})(FocusTargetPriority || (FocusTargetPriority = {}));
/**
 * Determines if a day is focusable based on its modifiers.
 *
 * A day is considered focusable if it is not disabled, hidden, or outside the
 * displayed month.
 *
 * @param modifiers The modifiers applied to the day.
 * @returns `true` if the day is focusable, otherwise `false`.
 */
function isFocusableDay(modifiers) {
    return (!modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.disabled] &&
        !modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.hidden] &&
        !modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.outside]);
}
/**
 * Calculates the focus target day based on priority.
 *
 * This function determines the day that should receive focus in the calendar,
 * prioritizing days with specific modifiers (e.g., "focused", "today") or
 * selection states.
 *
 * @param days The array of `CalendarDay` objects to evaluate.
 * @param getModifiers A function to retrieve the modifiers for a given day.
 * @param isSelected A function to determine if a day is selected.
 * @param lastFocused The last focused day, if any.
 * @returns The `CalendarDay` that should receive focus, or `undefined` if no
 *   focusable day is found.
 */
function calculateFocusTarget(days, getModifiers, isSelected, lastFocused) {
    let focusTarget;
    let foundFocusTargetPriority = -1;
    for (const day of days) {
        const modifiers = getModifiers(day);
        if (isFocusableDay(modifiers)) {
            if (modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.focused] &&
                foundFocusTargetPriority < FocusTargetPriority.FocusedModifier) {
                focusTarget = day;
                foundFocusTargetPriority = FocusTargetPriority.FocusedModifier;
            }
            else if (lastFocused?.isEqualTo(day) &&
                foundFocusTargetPriority < FocusTargetPriority.LastFocused) {
                focusTarget = day;
                foundFocusTargetPriority = FocusTargetPriority.LastFocused;
            }
            else if (isSelected(day.date) &&
                foundFocusTargetPriority < FocusTargetPriority.Selected) {
                focusTarget = day;
                foundFocusTargetPriority = FocusTargetPriority.Selected;
            }
            else if (modifiers[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.today] &&
                foundFocusTargetPriority < FocusTargetPriority.Today) {
                focusTarget = day;
                foundFocusTargetPriority = FocusTargetPriority.Today;
            }
        }
    }
    if (!focusTarget) {
        // Return the first day that is focusable
        focusTarget = days.find((day) => isFocusableDay(getModifiers(day)));
    }
    return focusTarget;
}
//# sourceMappingURL=calculateFocusTarget.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/createGetModifiers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/createGetModifiers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createGetModifiers: () => (/* binding */ createGetModifiers)
/* harmony export */ });
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");
/* harmony import */ var _utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/dateMatchModifiers.js */ "./node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js");


/**
 * Creates a function to retrieve the modifiers for a given day.
 *
 * This function calculates both internal and custom modifiers for each day
 * based on the provided calendar days and DayPicker props.
 *
 * @private
 * @param days The array of `CalendarDay` objects to process.
 * @param props The DayPicker props, including modifiers and configuration
 *   options.
 * @param dateLib The date library to use for date manipulation.
 * @returns A function that retrieves the modifiers for a given `CalendarDay`.
 */
function createGetModifiers(days, props, navStart, navEnd, dateLib) {
    const { disabled, hidden, modifiers, showOutsideDays, broadcastCalendar, today } = props;
    const { isSameDay, isSameMonth, startOfMonth, isBefore, endOfMonth, isAfter } = dateLib;
    const computedNavStart = navStart && startOfMonth(navStart);
    const computedNavEnd = navEnd && endOfMonth(navEnd);
    const internalModifiersMap = {
        [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.focused]: [],
        [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.outside]: [],
        [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.disabled]: [],
        [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.hidden]: [],
        [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.today]: []
    };
    const customModifiersMap = {};
    for (const day of days) {
        const { date, displayMonth } = day;
        const isOutside = Boolean(displayMonth && !isSameMonth(date, displayMonth));
        const isBeforeNavStart = Boolean(computedNavStart && isBefore(date, computedNavStart));
        const isAfterNavEnd = Boolean(computedNavEnd && isAfter(date, computedNavEnd));
        const isDisabled = Boolean(disabled && (0,_utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(date, disabled, dateLib));
        const isHidden = Boolean(hidden && (0,_utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(date, hidden, dateLib)) ||
            isBeforeNavStart ||
            isAfterNavEnd ||
            // Broadcast calendar will show outside days as default
            (!broadcastCalendar && !showOutsideDays && isOutside) ||
            (broadcastCalendar && showOutsideDays === false && isOutside);
        const isToday = isSameDay(date, today ?? dateLib.today());
        if (isOutside)
            internalModifiersMap.outside.push(day);
        if (isDisabled)
            internalModifiersMap.disabled.push(day);
        if (isHidden)
            internalModifiersMap.hidden.push(day);
        if (isToday)
            internalModifiersMap.today.push(day);
        // Add custom modifiers
        if (modifiers) {
            Object.keys(modifiers).forEach((name) => {
                const modifierValue = modifiers?.[name];
                const isMatch = modifierValue
                    ? (0,_utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(date, modifierValue, dateLib)
                    : false;
                if (!isMatch)
                    return;
                if (customModifiersMap[name]) {
                    customModifiersMap[name].push(day);
                }
                else {
                    customModifiersMap[name] = [day];
                }
            });
        }
    }
    return (day) => {
        // Initialize all the modifiers to false
        const dayFlags = {
            [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.focused]: false,
            [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.disabled]: false,
            [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.hidden]: false,
            [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.outside]: false,
            [_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag.today]: false
        };
        const customModifiers = {};
        // Find the modifiers for the given day
        for (const name in internalModifiersMap) {
            const days = internalModifiersMap[name];
            dayFlags[name] = days.some((d) => d === day);
        }
        for (const name in customModifiersMap) {
            customModifiers[name] = customModifiersMap[name].some((d) => d === day);
        }
        return {
            ...dayFlags,
            // custom modifiers should override all the previous ones
            ...customModifiers
        };
    };
}
//# sourceMappingURL=createGetModifiers.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/endOfBroadcastWeek.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/endOfBroadcastWeek.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   endOfBroadcastWeek: () => (/* binding */ endOfBroadcastWeek)
/* harmony export */ });
/* harmony import */ var _getBroadcastWeeksInMonth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBroadcastWeeksInMonth.js */ "./node_modules/react-day-picker/dist/esm/helpers/getBroadcastWeeksInMonth.js");
/* harmony import */ var _startOfBroadcastWeek_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfBroadcastWeek.js */ "./node_modules/react-day-picker/dist/esm/helpers/startOfBroadcastWeek.js");


/**
 * Returns the end date of the week in the broadcast calendar.
 *
 * The broadcast week ends on the last day of the last broadcast week for the
 * given date.
 *
 * @since 9.4.0
 * @param date The date for which to calculate the end of the broadcast week.
 * @param dateLib The date library to use for date manipulation.
 * @returns The end date of the broadcast week.
 */
function endOfBroadcastWeek(date, dateLib) {
    const startDate = (0,_startOfBroadcastWeek_js__WEBPACK_IMPORTED_MODULE_1__.startOfBroadcastWeek)(date, dateLib);
    const numberOfWeeks = (0,_getBroadcastWeeksInMonth_js__WEBPACK_IMPORTED_MODULE_0__.getBroadcastWeeksInMonth)(date, dateLib);
    const endDate = dateLib.addDays(startDate, numberOfWeeks * 7 - 1);
    return endDate;
}
//# sourceMappingURL=endOfBroadcastWeek.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getBroadcastWeeksInMonth.js":
/*!************************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getBroadcastWeeksInMonth.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBroadcastWeeksInMonth: () => (/* binding */ getBroadcastWeeksInMonth)
/* harmony export */ });
const FIVE_WEEKS = 5;
const FOUR_WEEKS = 4;
/**
 * Returns the number of weeks to display in the broadcast calendar for a given
 * month.
 *
 * The broadcast calendar may have either 4 or 5 weeks in a month, depending on
 * the start and end dates of the broadcast weeks.
 *
 * @since 9.4.0
 * @param month The month for which to calculate the number of weeks.
 * @param dateLib The date library to use for date manipulation.
 * @returns The number of weeks in the broadcast calendar (4 or 5).
 */
function getBroadcastWeeksInMonth(month, dateLib) {
    // Get the first day of the month
    const firstDayOfMonth = dateLib.startOfMonth(month);
    // Get the day of the week for the first day of the month (1-7, where 1 is Monday)
    const firstDayOfWeek = firstDayOfMonth.getDay() > 0 ? firstDayOfMonth.getDay() : 7;
    const broadcastStartDate = dateLib.addDays(month, -firstDayOfWeek + 1);
    const lastDateOfLastWeek = dateLib.addDays(broadcastStartDate, FIVE_WEEKS * 7 - 1);
    const numberOfWeeks = dateLib.getMonth(month) === dateLib.getMonth(lastDateOfLastWeek)
        ? FIVE_WEEKS
        : FOUR_WEEKS;
    return numberOfWeeks;
}
//# sourceMappingURL=getBroadcastWeeksInMonth.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getClassNamesForModifiers.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getClassNamesForModifiers.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getClassNamesForModifiers: () => (/* binding */ getClassNamesForModifiers)
/* harmony export */ });
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");

/**
 * Returns the class names for a day based on its modifiers.
 *
 * This function combines the base class name for the day with any class names
 * associated with active modifiers.
 *
 * @param modifiers The modifiers applied to the day.
 * @param classNames The base class names for the calendar elements.
 * @param modifiersClassNames The class names associated with specific
 *   modifiers.
 * @returns An array of class names for the day.
 */
function getClassNamesForModifiers(modifiers, classNames, modifiersClassNames = {}) {
    const modifierClassNames = Object.entries(modifiers)
        .filter(([, active]) => active === true)
        .reduce((previousValue, [key]) => {
        if (modifiersClassNames[key]) {
            previousValue.push(modifiersClassNames[key]);
        }
        else if (classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag[key]]) {
            previousValue.push(classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag[key]]);
        }
        else if (classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.SelectionState[key]]) {
            previousValue.push(classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.SelectionState[key]]);
        }
        return previousValue;
    }, [classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.UI.Day]]);
    return modifierClassNames;
}
//# sourceMappingURL=getClassNamesForModifiers.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getComponents.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getComponents.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getComponents: () => (/* binding */ getComponents)
/* harmony export */ });
/* harmony import */ var _components_custom_components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/custom-components.js */ "./node_modules/react-day-picker/dist/esm/components/custom-components.js");

/**
 * Merges custom components from the props with the default components.
 *
 * This function ensures that any custom components provided in the props
 * override the default components.
 *
 * @param customComponents The custom components provided in the DayPicker
 *   props.
 * @returns An object containing the merged components.
 */
function getComponents(customComponents) {
    return {
        ..._components_custom_components_js__WEBPACK_IMPORTED_MODULE_0__,
        ...customComponents
    };
}
//# sourceMappingURL=getComponents.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getDataAttributes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getDataAttributes.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDataAttributes: () => (/* binding */ getDataAttributes)
/* harmony export */ });
/**
 * Extracts `data-` attributes from the DayPicker props.
 *
 * This function collects all `data-` attributes from the props and adds
 * additional attributes based on the DayPicker configuration.
 *
 * @param props The DayPicker props.
 * @returns An object containing the `data-` attributes.
 */
function getDataAttributes(props) {
    const dataAttributes = {
        "data-mode": props.mode ?? undefined,
        "data-required": "required" in props ? props.required : undefined,
        "data-multiple-months": (props.numberOfMonths && props.numberOfMonths > 1) || undefined,
        "data-week-numbers": props.showWeekNumber || undefined,
        "data-broadcast-calendar": props.broadcastCalendar || undefined,
        "data-nav-layout": props.navLayout || undefined
    };
    Object.entries(props).forEach(([key, val]) => {
        if (key.startsWith("data-")) {
            dataAttributes[key] = val;
        }
    });
    return dataAttributes;
}
//# sourceMappingURL=getDataAttributes.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getDates.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getDates.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDates: () => (/* binding */ getDates)
/* harmony export */ });
/**
 * Returns all the dates to display in the calendar.
 *
 * This function calculates the range of dates to display based on the provided
 * display months, constraints, and calendar configuration.
 *
 * @param displayMonths The months to display in the calendar.
 * @param maxDate The maximum date to include in the range.
 * @param props The DayPicker props, including calendar configuration options.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of dates to display in the calendar.
 */
function getDates(displayMonths, maxDate, props, dateLib) {
    const firstMonth = displayMonths[0];
    const lastMonth = displayMonths[displayMonths.length - 1];
    const { ISOWeek, fixedWeeks, broadcastCalendar } = props ?? {};
    const { addDays, differenceInCalendarDays, differenceInCalendarMonths, endOfBroadcastWeek, endOfISOWeek, endOfMonth, endOfWeek, isAfter, startOfBroadcastWeek, startOfISOWeek, startOfWeek } = dateLib;
    const startWeekFirstDate = broadcastCalendar
        ? startOfBroadcastWeek(firstMonth, dateLib)
        : ISOWeek
            ? startOfISOWeek(firstMonth)
            : startOfWeek(firstMonth);
    const endWeekLastDate = broadcastCalendar
        ? endOfBroadcastWeek(lastMonth)
        : ISOWeek
            ? endOfISOWeek(endOfMonth(lastMonth))
            : endOfWeek(endOfMonth(lastMonth));
    const nOfDays = differenceInCalendarDays(endWeekLastDate, startWeekFirstDate);
    const nOfMonths = differenceInCalendarMonths(lastMonth, firstMonth) + 1;
    const dates = [];
    for (let i = 0; i <= nOfDays; i++) {
        const date = addDays(startWeekFirstDate, i);
        if (maxDate && isAfter(date, maxDate)) {
            break;
        }
        dates.push(date);
    }
    // If fixed weeks is enabled, add the extra dates to the array
    const nrOfDaysWithFixedWeeks = broadcastCalendar ? 35 : 42;
    const extraDates = nrOfDaysWithFixedWeeks * nOfMonths;
    if (fixedWeeks && dates.length < extraDates) {
        const daysToAdd = extraDates - dates.length;
        for (let i = 0; i < daysToAdd; i++) {
            const date = addDays(dates[dates.length - 1], 1);
            dates.push(date);
        }
    }
    return dates;
}
//# sourceMappingURL=getDates.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getDays.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getDays.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDays: () => (/* binding */ getDays)
/* harmony export */ });
/**
 * Returns all the days belonging to the calendar by merging the days in the
 * weeks for each month.
 *
 * @param calendarMonths The array of calendar months.
 * @returns An array of `CalendarDay` objects representing all the days in the
 *   calendar.
 */
function getDays(calendarMonths) {
    const initialDays = [];
    return calendarMonths.reduce((days, month) => {
        const weekDays = month.weeks.reduce((weekDays, week) => {
            return [...weekDays, ...week.days];
        }, initialDays);
        return [...days, ...weekDays];
    }, initialDays);
}
//# sourceMappingURL=getDays.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getDefaultClassNames.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getDefaultClassNames.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefaultClassNames: () => (/* binding */ getDefaultClassNames)
/* harmony export */ });
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");

/**
 * Returns the default class names for the UI elements.
 *
 * This function generates a mapping of default class names for various UI
 * elements, day flags, selection states, and animations.
 *
 * @returns An object containing the default class names.
 * @group Utilities
 */
function getDefaultClassNames() {
    const classNames = {};
    for (const key in _UI_js__WEBPACK_IMPORTED_MODULE_0__.UI) {
        classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.UI[key]] =
            `rdp-${_UI_js__WEBPACK_IMPORTED_MODULE_0__.UI[key]}`;
    }
    for (const key in _UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag) {
        classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag[key]] =
            `rdp-${_UI_js__WEBPACK_IMPORTED_MODULE_0__.DayFlag[key]}`;
    }
    for (const key in _UI_js__WEBPACK_IMPORTED_MODULE_0__.SelectionState) {
        classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.SelectionState[key]] =
            `rdp-${_UI_js__WEBPACK_IMPORTED_MODULE_0__.SelectionState[key]}`;
    }
    for (const key in _UI_js__WEBPACK_IMPORTED_MODULE_0__.Animation) {
        classNames[_UI_js__WEBPACK_IMPORTED_MODULE_0__.Animation[key]] =
            `rdp-${_UI_js__WEBPACK_IMPORTED_MODULE_0__.Animation[key]}`;
    }
    return classNames;
}
//# sourceMappingURL=getDefaultClassNames.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getDisplayMonths.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getDisplayMonths.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDisplayMonths: () => (/* binding */ getDisplayMonths)
/* harmony export */ });
/**
 * Returns the months to display in the calendar.
 *
 * @param firstDisplayedMonth The first month currently displayed in the
 *   calendar.
 * @param calendarEndMonth The latest month the user can navigate to.
 * @param props The DayPicker props, including `numberOfMonths`.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of dates representing the months to display.
 */
function getDisplayMonths(firstDisplayedMonth, calendarEndMonth, props, dateLib) {
    const { numberOfMonths = 1 } = props;
    const months = [];
    for (let i = 0; i < numberOfMonths; i++) {
        const month = dateLib.addMonths(firstDisplayedMonth, i);
        if (calendarEndMonth && month > calendarEndMonth) {
            break;
        }
        months.push(month);
    }
    return months;
}
//# sourceMappingURL=getDisplayMonths.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getFocusableDate.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getFocusableDate.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFocusableDate: () => (/* binding */ getFocusableDate)
/* harmony export */ });
/**
 * Calculates the next date that should be focused in the calendar.
 *
 * This function determines the next focusable date based on the movement
 * direction, constraints, and calendar configuration.
 *
 * @param moveBy The unit of movement (e.g., "day", "week").
 * @param moveDir The direction of movement ("before" or "after").
 * @param refDate The reference date from which to calculate the next focusable
 *   date.
 * @param navStart The earliest date the user can navigate to.
 * @param navEnd The latest date the user can navigate to.
 * @param props The DayPicker props, including calendar configuration options.
 * @param dateLib The date library to use for date manipulation.
 * @returns The next focusable date.
 */
function getFocusableDate(moveBy, moveDir, refDate, navStart, navEnd, props, dateLib) {
    const { ISOWeek, broadcastCalendar } = props;
    const { addDays, addMonths, addWeeks, addYears, endOfBroadcastWeek, endOfISOWeek, endOfWeek, max, min, startOfBroadcastWeek, startOfISOWeek, startOfWeek } = dateLib;
    const moveFns = {
        day: addDays,
        week: addWeeks,
        month: addMonths,
        year: addYears,
        startOfWeek: (date) => broadcastCalendar
            ? startOfBroadcastWeek(date, dateLib)
            : ISOWeek
                ? startOfISOWeek(date)
                : startOfWeek(date),
        endOfWeek: (date) => broadcastCalendar
            ? endOfBroadcastWeek(date)
            : ISOWeek
                ? endOfISOWeek(date)
                : endOfWeek(date)
    };
    let focusableDate = moveFns[moveBy](refDate, moveDir === "after" ? 1 : -1);
    if (moveDir === "before" && navStart) {
        focusableDate = max([navStart, focusableDate]);
    }
    else if (moveDir === "after" && navEnd) {
        focusableDate = min([navEnd, focusableDate]);
    }
    return focusableDate;
}
//# sourceMappingURL=getFocusableDate.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getFormatters.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getFormatters.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFormatters: () => (/* binding */ getFormatters)
/* harmony export */ });
/* harmony import */ var _formatters_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../formatters/index.js */ "./node_modules/react-day-picker/dist/esm/formatters/index.js");

/**
 * Merges custom formatters from the props with the default formatters.
 *
 * @param customFormatters The custom formatters provided in the DayPicker
 *   props.
 * @returns The merged formatters object.
 */
function getFormatters(customFormatters) {
    if (customFormatters?.formatMonthCaption && !customFormatters.formatCaption) {
        customFormatters.formatCaption = customFormatters.formatMonthCaption;
    }
    if (customFormatters?.formatYearCaption &&
        !customFormatters.formatYearDropdown) {
        customFormatters.formatYearDropdown = customFormatters.formatYearCaption;
    }
    return {
        ..._formatters_index_js__WEBPACK_IMPORTED_MODULE_0__,
        ...customFormatters
    };
}
//# sourceMappingURL=getFormatters.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getInitialMonth.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getInitialMonth.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getInitialMonth: () => (/* binding */ getInitialMonth)
/* harmony export */ });
/**
 * Determines the initial month to display in the calendar based on the provided
 * props.
 *
 * This function calculates the starting month, considering constraints such as
 * `startMonth`, `endMonth`, and the number of months to display.
 *
 * @param props The DayPicker props, including navigation and date constraints.
 * @param dateLib The date library to use for date manipulation.
 * @returns The initial month to display.
 */
function getInitialMonth(props, navStart, navEnd, dateLib) {
    const { month, defaultMonth, today = dateLib.today(), numberOfMonths = 1 } = props;
    let initialMonth = month || defaultMonth || today;
    const { differenceInCalendarMonths, addMonths, startOfMonth } = dateLib;
    if (navEnd &&
        differenceInCalendarMonths(navEnd, initialMonth) < numberOfMonths - 1) {
        const offset = -1 * (numberOfMonths - 1);
        initialMonth = addMonths(navEnd, offset);
    }
    if (navStart && differenceInCalendarMonths(initialMonth, navStart) < 0) {
        initialMonth = navStart;
    }
    return startOfMonth(initialMonth);
}
//# sourceMappingURL=getInitialMonth.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getMonthOptions.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getMonthOptions.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMonthOptions: () => (/* binding */ getMonthOptions)
/* harmony export */ });
/**
 * Returns the months to show in the dropdown.
 *
 * This function generates a list of months for the current year, formatted
 * using the provided formatter, and determines whether each month should be
 * disabled based on the navigation range.
 *
 * @param displayMonth The currently displayed month.
 * @param navStart The start date for navigation.
 * @param navEnd The end date for navigation.
 * @param formatters The formatters to use for formatting the month labels.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of dropdown options representing the months, or `undefined`
 *   if no months are available.
 */
function getMonthOptions(displayMonth, navStart, navEnd, formatters, dateLib) {
    const { startOfMonth, startOfYear, endOfYear, eachMonthOfInterval, getMonth } = dateLib;
    const months = eachMonthOfInterval({
        start: startOfYear(displayMonth),
        end: endOfYear(displayMonth)
    });
    const options = months.map((month) => {
        const label = formatters.formatMonthDropdown(month, dateLib);
        const value = getMonth(month);
        const disabled = (navStart && month < startOfMonth(navStart)) ||
            (navEnd && month > startOfMonth(navEnd)) ||
            false;
        return { value, label, disabled };
    });
    return options;
}
//# sourceMappingURL=getMonthOptions.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getMonths.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getMonths.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMonths: () => (/* binding */ getMonths)
/* harmony export */ });
/* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/index.js */ "./node_modules/react-day-picker/dist/esm/classes/CalendarDay.js");
/* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/index.js */ "./node_modules/react-day-picker/dist/esm/classes/CalendarMonth.js");
/* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/index.js */ "./node_modules/react-day-picker/dist/esm/classes/CalendarWeek.js");

/**
 * Returns the months to display in the calendar.
 *
 * This function generates `CalendarMonth` objects for each month to be
 * displayed, including their weeks and days, based on the provided display
 * months and dates.
 *
 * @param displayMonths The months (as dates) to display in the calendar.
 * @param dates The dates to display in the calendar.
 * @param props Options from the DayPicker props context.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of `CalendarMonth` objects representing the months to
 *   display.
 */
function getMonths(displayMonths, dates, props, dateLib) {
    const { addDays, endOfBroadcastWeek, endOfISOWeek, endOfMonth, endOfWeek, getISOWeek, getWeek, startOfBroadcastWeek, startOfISOWeek, startOfWeek } = dateLib;
    const dayPickerMonths = displayMonths.reduce((months, month) => {
        const firstDateOfFirstWeek = props.broadcastCalendar
            ? startOfBroadcastWeek(month, dateLib)
            : props.ISOWeek
                ? startOfISOWeek(month)
                : startOfWeek(month);
        const lastDateOfLastWeek = props.broadcastCalendar
            ? endOfBroadcastWeek(month)
            : props.ISOWeek
                ? endOfISOWeek(endOfMonth(month))
                : endOfWeek(endOfMonth(month));
        /** The dates to display in the month. */
        const monthDates = dates.filter((date) => {
            return date >= firstDateOfFirstWeek && date <= lastDateOfLastWeek;
        });
        const nrOfDaysWithFixedWeeks = props.broadcastCalendar ? 35 : 42;
        if (props.fixedWeeks && monthDates.length < nrOfDaysWithFixedWeeks) {
            const extraDates = dates.filter((date) => {
                const daysToAdd = nrOfDaysWithFixedWeeks - monthDates.length;
                return (date > lastDateOfLastWeek &&
                    date <= addDays(lastDateOfLastWeek, daysToAdd));
            });
            monthDates.push(...extraDates);
        }
        const weeks = monthDates.reduce((weeks, date) => {
            const weekNumber = props.ISOWeek ? getISOWeek(date) : getWeek(date);
            const week = weeks.find((week) => week.weekNumber === weekNumber);
            const day = new _classes_index_js__WEBPACK_IMPORTED_MODULE_0__.CalendarDay(date, month, dateLib);
            if (!week) {
                weeks.push(new _classes_index_js__WEBPACK_IMPORTED_MODULE_2__.CalendarWeek(weekNumber, [day]));
            }
            else {
                week.days.push(day);
            }
            return weeks;
        }, []);
        const dayPickerMonth = new _classes_index_js__WEBPACK_IMPORTED_MODULE_1__.CalendarMonth(month, weeks);
        months.push(dayPickerMonth);
        return months;
    }, []);
    if (!props.reverseMonths) {
        return dayPickerMonths;
    }
    else {
        return dayPickerMonths.reverse();
    }
}
//# sourceMappingURL=getMonths.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getNavMonth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getNavMonth.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNavMonths: () => (/* binding */ getNavMonths)
/* harmony export */ });
/**
 * Returns the start and end months for calendar navigation.
 *
 * @param props The DayPicker props, including navigation and layout options.
 * @param dateLib The date library to use for date manipulation.
 * @returns A tuple containing the start and end months for navigation.
 */
function getNavMonths(props, dateLib) {
    let { startMonth, endMonth } = props;
    const { startOfYear, startOfDay, startOfMonth, endOfMonth, addYears, endOfYear, newDate, today } = dateLib;
    // Handle deprecated code
    const { fromYear, toYear, fromMonth, toMonth } = props;
    if (!startMonth && fromMonth) {
        startMonth = fromMonth;
    }
    if (!startMonth && fromYear) {
        startMonth = dateLib.newDate(fromYear, 0, 1);
    }
    if (!endMonth && toMonth) {
        endMonth = toMonth;
    }
    if (!endMonth && toYear) {
        endMonth = newDate(toYear, 11, 31);
    }
    const hasYearDropdown = props.captionLayout === "dropdown" ||
        props.captionLayout === "dropdown-years";
    if (startMonth) {
        startMonth = startOfMonth(startMonth);
    }
    else if (fromYear) {
        startMonth = newDate(fromYear, 0, 1);
    }
    else if (!startMonth && hasYearDropdown) {
        startMonth = startOfYear(addYears(props.today ?? today(), -100));
    }
    if (endMonth) {
        endMonth = endOfMonth(endMonth);
    }
    else if (toYear) {
        endMonth = newDate(toYear, 11, 31);
    }
    else if (!endMonth && hasYearDropdown) {
        endMonth = endOfYear(props.today ?? today());
    }
    return [
        startMonth ? startOfDay(startMonth) : startMonth,
        endMonth ? startOfDay(endMonth) : endMonth
    ];
}
//# sourceMappingURL=getNavMonth.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getNextFocus.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getNextFocus.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNextFocus: () => (/* binding */ getNextFocus)
/* harmony export */ });
/* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/index.js */ "./node_modules/react-day-picker/dist/esm/classes/CalendarDay.js");
/* harmony import */ var _utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/dateMatchModifiers.js */ "./node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js");
/* harmony import */ var _getFocusableDate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFocusableDate.js */ "./node_modules/react-day-picker/dist/esm/helpers/getFocusableDate.js");



/**
 * Determines the next focusable day in the calendar.
 *
 * This function recursively calculates the next focusable day based on the
 * movement direction and modifiers applied to the days.
 *
 * @param moveBy The unit of movement (e.g., "day", "week").
 * @param moveDir The direction of movement ("before" or "after").
 * @param refDay The currently focused day.
 * @param calendarStartMonth The earliest month the user can navigate to.
 * @param calendarEndMonth The latest month the user can navigate to.
 * @param props The DayPicker props, including modifiers and configuration
 *   options.
 * @param dateLib The date library to use for date manipulation.
 * @param attempt The current recursion attempt (used to limit recursion depth).
 * @returns The next focusable day, or `undefined` if no focusable day is found.
 */
function getNextFocus(moveBy, moveDir, refDay, calendarStartMonth, calendarEndMonth, props, dateLib, attempt = 0) {
    if (attempt > 365) {
        // Limit the recursion to 365 attempts
        return undefined;
    }
    const focusableDate = (0,_getFocusableDate_js__WEBPACK_IMPORTED_MODULE_2__.getFocusableDate)(moveBy, moveDir, refDay.date, calendarStartMonth, calendarEndMonth, props, dateLib);
    const isDisabled = Boolean(props.disabled && (0,_utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(focusableDate, props.disabled, dateLib));
    const isHidden = Boolean(props.hidden && (0,_utils_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(focusableDate, props.hidden, dateLib));
    const targetMonth = focusableDate;
    const focusDay = new _classes_index_js__WEBPACK_IMPORTED_MODULE_0__.CalendarDay(focusableDate, targetMonth, dateLib);
    if (!isDisabled && !isHidden) {
        return focusDay;
    }
    // Recursively attempt to find the next focusable date
    return getNextFocus(moveBy, moveDir, focusDay, calendarStartMonth, calendarEndMonth, props, dateLib, attempt + 1);
}
//# sourceMappingURL=getNextFocus.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getNextMonth.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getNextMonth.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNextMonth: () => (/* binding */ getNextMonth)
/* harmony export */ });
/**
 * Returns the next month the user can navigate to, based on the given options.
 *
 * The next month is not always the next calendar month:
 *
 * - If it is after the `calendarEndMonth`, it returns `undefined`.
 * - If paged navigation is enabled, it skips forward by the number of displayed
 *   months.
 *
 * @param firstDisplayedMonth The first month currently displayed in the
 *   calendar.
 * @param calendarEndMonth The latest month the user can navigate to.
 * @param options Navigation options, including `numberOfMonths` and
 *   `pagedNavigation`.
 * @param dateLib The date library to use for date manipulation.
 * @returns The next month, or `undefined` if navigation is not possible.
 */
function getNextMonth(firstDisplayedMonth, calendarEndMonth, options, dateLib) {
    if (options.disableNavigation) {
        return undefined;
    }
    const { pagedNavigation, numberOfMonths = 1 } = options;
    const { startOfMonth, addMonths, differenceInCalendarMonths } = dateLib;
    const offset = pagedNavigation ? numberOfMonths : 1;
    const month = startOfMonth(firstDisplayedMonth);
    if (!calendarEndMonth) {
        return addMonths(month, offset);
    }
    const monthsDiff = differenceInCalendarMonths(calendarEndMonth, firstDisplayedMonth);
    if (monthsDiff < numberOfMonths) {
        return undefined;
    }
    return addMonths(month, offset);
}
//# sourceMappingURL=getNextMonth.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getPreviousMonth.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getPreviousMonth.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPreviousMonth: () => (/* binding */ getPreviousMonth)
/* harmony export */ });
/**
 * Returns the previous month the user can navigate to, based on the given
 * options.
 *
 * The previous month is not always the previous calendar month:
 *
 * - If it is before the `calendarStartMonth`, it returns `undefined`.
 * - If paged navigation is enabled, it skips back by the number of displayed
 *   months.
 *
 * @param firstDisplayedMonth The first month currently displayed in the
 *   calendar.
 * @param calendarStartMonth The earliest month the user can navigate to.
 * @param options Navigation options, including `numberOfMonths` and
 *   `pagedNavigation`.
 * @param dateLib The date library to use for date manipulation.
 * @returns The previous month, or `undefined` if navigation is not possible.
 */
function getPreviousMonth(firstDisplayedMonth, calendarStartMonth, options, dateLib) {
    if (options.disableNavigation) {
        return undefined;
    }
    const { pagedNavigation, numberOfMonths } = options;
    const { startOfMonth, addMonths, differenceInCalendarMonths } = dateLib;
    const offset = pagedNavigation ? (numberOfMonths ?? 1) : 1;
    const month = startOfMonth(firstDisplayedMonth);
    if (!calendarStartMonth) {
        return addMonths(month, -offset);
    }
    const monthsDiff = differenceInCalendarMonths(month, calendarStartMonth);
    if (monthsDiff <= 0) {
        return undefined;
    }
    return addMonths(month, -offset);
}
//# sourceMappingURL=getPreviousMonth.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getStyleForModifiers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getStyleForModifiers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getStyleForModifiers: () => (/* binding */ getStyleForModifiers)
/* harmony export */ });
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");

/**
 * Returns the computed style for a day based on its modifiers.
 *
 * This function merges the base styles for the day with any styles associated
 * with active modifiers.
 *
 * @param dayModifiers The modifiers applied to the day.
 * @param styles The base styles for the calendar elements.
 * @param modifiersStyles The styles associated with specific modifiers.
 * @returns The computed style for the day.
 */
function getStyleForModifiers(dayModifiers, styles = {}, modifiersStyles = {}) {
    let style = { ...styles?.[_UI_js__WEBPACK_IMPORTED_MODULE_0__.UI.Day] };
    Object.entries(dayModifiers)
        .filter(([, active]) => active === true)
        .forEach(([modifier]) => {
        style = {
            ...style,
            ...modifiersStyles?.[modifier]
        };
    });
    return style;
}
//# sourceMappingURL=getStyleForModifiers.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getWeekdays.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getWeekdays.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWeekdays: () => (/* binding */ getWeekdays)
/* harmony export */ });
/**
 * Generates a series of 7 days, starting from the beginning of the week, to use
 * for formatting weekday names (e.g., Monday, Tuesday, etc.).
 *
 * @param dateLib The date library to use for date manipulation.
 * @param ISOWeek Whether to use ISO week numbering (weeks start on Monday).
 * @param broadcastCalendar Whether to use the broadcast calendar (weeks start
 *   on Monday, but may include adjustments for broadcast-specific rules).
 * @returns An array of 7 dates representing the weekdays.
 */
function getWeekdays(dateLib, ISOWeek, broadcastCalendar) {
    const today = dateLib.today();
    const start = broadcastCalendar
        ? dateLib.startOfBroadcastWeek(today, dateLib)
        : ISOWeek
            ? dateLib.startOfISOWeek(today)
            : dateLib.startOfWeek(today);
    const days = [];
    for (let i = 0; i < 7; i++) {
        const day = dateLib.addDays(start, i);
        days.push(day);
    }
    return days;
}
//# sourceMappingURL=getWeekdays.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getWeeks.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getWeeks.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWeeks: () => (/* binding */ getWeeks)
/* harmony export */ });
/**
 * Returns an array of calendar weeks from an array of calendar months.
 *
 * @param months The array of calendar months.
 * @returns An array of calendar weeks.
 */
function getWeeks(months) {
    const initialWeeks = [];
    return months.reduce((weeks, month) => {
        return [...weeks, ...month.weeks];
    }, initialWeeks);
}
//# sourceMappingURL=getWeeks.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/getYearOptions.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/getYearOptions.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getYearOptions: () => (/* binding */ getYearOptions)
/* harmony export */ });
/**
 * Returns the years to display in the dropdown.
 *
 * This function generates a list of years between the navigation start and end
 * dates, formatted using the provided formatter.
 *
 * @param navStart The start date for navigation.
 * @param navEnd The end date for navigation.
 * @param formatters The formatters to use for formatting the year labels.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of dropdown options representing the years, or `undefined`
 *   if `navStart` or `navEnd` is not provided.
 */
function getYearOptions(navStart, navEnd, formatters, dateLib) {
    if (!navStart)
        return undefined;
    if (!navEnd)
        return undefined;
    const { startOfYear, endOfYear, addYears, getYear, isBefore, isSameYear } = dateLib;
    const firstNavYear = startOfYear(navStart);
    const lastNavYear = endOfYear(navEnd);
    const years = [];
    let year = firstNavYear;
    while (isBefore(year, lastNavYear) || isSameYear(year, lastNavYear)) {
        years.push(year);
        year = addYears(year, 1);
    }
    return years.map((year) => {
        const label = formatters.formatYearDropdown(year, dateLib);
        return {
            value: getYear(year),
            label,
            disabled: false
        };
    });
}
//# sourceMappingURL=getYearOptions.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/startOfBroadcastWeek.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/startOfBroadcastWeek.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startOfBroadcastWeek: () => (/* binding */ startOfBroadcastWeek)
/* harmony export */ });
/**
 * Returns the start date of the week in the broadcast calendar.
 *
 * The broadcast week starts on Monday. If the first day of the month is not a
 * Monday, this function calculates the previous Monday as the start of the
 * broadcast week.
 *
 * @since 9.4.0
 * @param date The date for which to calculate the start of the broadcast week.
 * @param dateLib The date library to use for date manipulation.
 * @returns The start date of the broadcast week.
 */
function startOfBroadcastWeek(date, dateLib) {
    const firstOfMonth = dateLib.startOfMonth(date);
    const dayOfWeek = firstOfMonth.getDay();
    if (dayOfWeek === 1) {
        return firstOfMonth;
    }
    else if (dayOfWeek === 0) {
        return dateLib.addDays(firstOfMonth, -1 * 6);
    }
    else {
        return dateLib.addDays(firstOfMonth, -1 * (dayOfWeek - 1));
    }
}
//# sourceMappingURL=startOfBroadcastWeek.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useControlledValue: () => (/* binding */ useControlledValue)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/**
 * A custom hook for managing both controlled and uncontrolled component states.
 *
 * This hook allows a component to support both controlled and uncontrolled
 * states by determining whether the `controlledValue` is provided. If it is
 * undefined, the hook falls back to using the internal state.
 *
 * @example
 *   // Uncontrolled usage
 *   const [value, setValue] = useControlledValue(0, undefined);
 *
 *   // Controlled usage
 *   const [value, setValue] = useControlledValue(0, props.value);
 *
 * @template T - The type of the value.
 * @param defaultValue The initial value for the uncontrolled state.
 * @param controlledValue The value for the controlled state. If undefined, the
 *   component will use the uncontrolled state.
 * @returns A tuple where the first element is the current value (either
 *   controlled or uncontrolled) and the second element is a setter function to
 *   update the value.
 */
function useControlledValue(defaultValue, controlledValue) {
    const [uncontrolledValue, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue);
    const value = controlledValue === undefined ? uncontrolledValue : controlledValue;
    return [value, setValue];
}
//# sourceMappingURL=useControlledValue.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelCaption: () => (/* reexport safe */ _labelGrid_js__WEBPACK_IMPORTED_MODULE_0__.labelCaption),
/* harmony export */   labelDay: () => (/* reexport safe */ _labelDayButton_js__WEBPACK_IMPORTED_MODULE_2__.labelDay),
/* harmony export */   labelDayButton: () => (/* reexport safe */ _labelDayButton_js__WEBPACK_IMPORTED_MODULE_2__.labelDayButton),
/* harmony export */   labelGrid: () => (/* reexport safe */ _labelGrid_js__WEBPACK_IMPORTED_MODULE_0__.labelGrid),
/* harmony export */   labelGridcell: () => (/* reexport safe */ _labelGridcell_js__WEBPACK_IMPORTED_MODULE_1__.labelGridcell),
/* harmony export */   labelMonthDropdown: () => (/* reexport safe */ _labelMonthDropdown_js__WEBPACK_IMPORTED_MODULE_4__.labelMonthDropdown),
/* harmony export */   labelNav: () => (/* reexport safe */ _labelNav_js__WEBPACK_IMPORTED_MODULE_3__.labelNav),
/* harmony export */   labelNext: () => (/* reexport safe */ _labelNext_js__WEBPACK_IMPORTED_MODULE_5__.labelNext),
/* harmony export */   labelPrevious: () => (/* reexport safe */ _labelPrevious_js__WEBPACK_IMPORTED_MODULE_6__.labelPrevious),
/* harmony export */   labelWeekNumber: () => (/* reexport safe */ _labelWeekNumber_js__WEBPACK_IMPORTED_MODULE_8__.labelWeekNumber),
/* harmony export */   labelWeekNumberHeader: () => (/* reexport safe */ _labelWeekNumberHeader_js__WEBPACK_IMPORTED_MODULE_9__.labelWeekNumberHeader),
/* harmony export */   labelWeekday: () => (/* reexport safe */ _labelWeekday_js__WEBPACK_IMPORTED_MODULE_7__.labelWeekday),
/* harmony export */   labelYearDropdown: () => (/* reexport safe */ _labelYearDropdown_js__WEBPACK_IMPORTED_MODULE_10__.labelYearDropdown)
/* harmony export */ });
/* harmony import */ var _labelGrid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelGrid.js */ "./node_modules/react-day-picker/dist/esm/labels/labelGrid.js");
/* harmony import */ var _labelGridcell_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./labelGridcell.js */ "./node_modules/react-day-picker/dist/esm/labels/labelGridcell.js");
/* harmony import */ var _labelDayButton_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./labelDayButton.js */ "./node_modules/react-day-picker/dist/esm/labels/labelDayButton.js");
/* harmony import */ var _labelNav_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./labelNav.js */ "./node_modules/react-day-picker/dist/esm/labels/labelNav.js");
/* harmony import */ var _labelMonthDropdown_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./labelMonthDropdown.js */ "./node_modules/react-day-picker/dist/esm/labels/labelMonthDropdown.js");
/* harmony import */ var _labelNext_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./labelNext.js */ "./node_modules/react-day-picker/dist/esm/labels/labelNext.js");
/* harmony import */ var _labelPrevious_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./labelPrevious.js */ "./node_modules/react-day-picker/dist/esm/labels/labelPrevious.js");
/* harmony import */ var _labelWeekday_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./labelWeekday.js */ "./node_modules/react-day-picker/dist/esm/labels/labelWeekday.js");
/* harmony import */ var _labelWeekNumber_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./labelWeekNumber.js */ "./node_modules/react-day-picker/dist/esm/labels/labelWeekNumber.js");
/* harmony import */ var _labelWeekNumberHeader_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./labelWeekNumberHeader.js */ "./node_modules/react-day-picker/dist/esm/labels/labelWeekNumberHeader.js");
/* harmony import */ var _labelYearDropdown_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./labelYearDropdown.js */ "./node_modules/react-day-picker/dist/esm/labels/labelYearDropdown.js");












//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelDayButton.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelDayButton.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelDay: () => (/* binding */ labelDay),
/* harmony export */   labelDayButton: () => (/* binding */ labelDayButton)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Generates the ARIA label for a day button.
 *
 * Use the `modifiers` argument to provide additional context for the label,
 * such as indicating if the day is "today" or "selected."
 *
 * @defaultValue The formatted date.
 * @param date - The date to format.
 * @param modifiers - The modifiers providing context for the day.
 * @param options - Optional configuration for the date formatting library.
 * @param dateLib - An optional instance of the date formatting library.
 * @returns The ARIA label for the day button.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelDayButton(date, modifiers, options, dateLib) {
    let label = (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(date, "PPPP");
    if (modifiers.today)
        label = `Today, ${label}`;
    if (modifiers.selected)
        label = `${label}, selected`;
    return label;
}
/**
 * @ignore
 * @deprecated Use `labelDayButton` instead.
 */
const labelDay = labelDayButton;
//# sourceMappingURL=labelDayButton.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelGrid.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelGrid.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelCaption: () => (/* binding */ labelCaption),
/* harmony export */   labelGrid: () => (/* binding */ labelGrid)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Generates the ARIA label for the month grid, which is announced when entering
 * the grid.
 *
 * @defaultValue `LLLL y` (e.g., "November 2022").
 * @param date - The date representing the month.
 * @param options - Optional configuration for the date formatting library.
 * @param dateLib - An optional instance of the date formatting library.
 * @returns The ARIA label for the month grid.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelGrid(date, options, dateLib) {
    return (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(date, "LLLL y");
}
/**
 * @ignore
 * @deprecated Use {@link labelGrid} instead.
 */
const labelCaption = labelGrid;
//# sourceMappingURL=labelGrid.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelGridcell.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelGridcell.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelGridcell: () => (/* binding */ labelGridcell)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Generates the label for a day grid cell when the calendar is not interactive.
 *
 * @param date - The date to format.
 * @param modifiers - Optional modifiers providing context for the day.
 * @param options - Optional configuration for the date formatting library.
 * @param dateLib - An optional instance of the date formatting library.
 * @returns The label for the day grid cell.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelGridcell(date, modifiers, options, dateLib) {
    let label = (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(date, "PPPP");
    if (modifiers?.today) {
        label = `Today, ${label}`;
    }
    return label;
}
//# sourceMappingURL=labelGridcell.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelMonthDropdown.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelMonthDropdown.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelMonthDropdown: () => (/* binding */ labelMonthDropdown)
/* harmony export */ });
/**
 * Generates the ARIA label for the months dropdown.
 *
 * @defaultValue `"Choose the Month"`
 * @param options - Optional configuration for the date formatting library.
 * @returns The ARIA label for the months dropdown.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelMonthDropdown(options) {
    return "Choose the Month";
}
//# sourceMappingURL=labelMonthDropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelNav.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelNav.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelNav: () => (/* binding */ labelNav)
/* harmony export */ });
/**
 * Generates the ARIA label for the navigation toolbar.
 *
 * @defaultValue `""`
 * @returns The ARIA label for the navigation toolbar.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelNav() {
    return "";
}
//# sourceMappingURL=labelNav.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelNext.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelNext.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelNext: () => (/* binding */ labelNext)
/* harmony export */ });
/**
 * Generates the ARIA label for the "next month" button.
 *
 * @defaultValue `"Go to the Next Month"`
 * @param month - The date representing the next month, or `undefined` if there
 *   is no next month.
 * @returns The ARIA label for the "next month" button.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelNext(month) {
    return "Go to the Next Month";
}
//# sourceMappingURL=labelNext.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelPrevious.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelPrevious.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelPrevious: () => (/* binding */ labelPrevious)
/* harmony export */ });
/**
 * Generates the ARIA label for the "previous month" button.
 *
 * @defaultValue `"Go to the Previous Month"`
 * @param month - The date representing the previous month, or `undefined` if
 *   there is no previous month.
 * @returns The ARIA label for the "previous month" button.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelPrevious(month) {
    return "Go to the Previous Month";
}
//# sourceMappingURL=labelPrevious.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelWeekNumber.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelWeekNumber.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelWeekNumber: () => (/* binding */ labelWeekNumber)
/* harmony export */ });
/**
 * Generates the ARIA label for the week number cell (the first cell in a row).
 *
 * @defaultValue `Week ${weekNumber}`
 * @param weekNumber - The number of the week.
 * @param options - Optional configuration for the date formatting library.
 * @returns The ARIA label for the week number cell.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelWeekNumber(weekNumber, options) {
    return `Week ${weekNumber}`;
}
//# sourceMappingURL=labelWeekNumber.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelWeekNumberHeader.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelWeekNumberHeader.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelWeekNumberHeader: () => (/* binding */ labelWeekNumberHeader)
/* harmony export */ });
/**
 * Generates the ARIA label for the week number header element.
 *
 * @defaultValue `"Week Number"`
 * @param options - Optional configuration for the date formatting library.
 * @returns The ARIA label for the week number header.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelWeekNumberHeader(options) {
    return "Week Number";
}
//# sourceMappingURL=labelWeekNumberHeader.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelWeekday.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelWeekday.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelWeekday: () => (/* binding */ labelWeekday)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Generates the ARIA label for a weekday column header.
 *
 * @defaultValue `"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"`
 * @param date - The date representing the weekday.
 * @param options - Optional configuration for the date formatting library.
 * @param dateLib - An optional instance of the date formatting library.
 * @returns The ARIA label for the weekday column header.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelWeekday(date, options, dateLib) {
    return (dateLib ?? new _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.DateLib(options)).format(date, "cccc");
}
//# sourceMappingURL=labelWeekday.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/labels/labelYearDropdown.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/labels/labelYearDropdown.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelYearDropdown: () => (/* binding */ labelYearDropdown)
/* harmony export */ });
/**
 * Generates the ARIA label for the years dropdown.
 *
 * @defaultValue `"Choose the Year"`
 * @param options - Optional configuration for the date formatting library.
 * @returns The ARIA label for the years dropdown.
 * @group Labels
 * @see https://daypicker.dev/docs/translation#aria-labels
 */
function labelYearDropdown(options) {
    return "Choose the Year";
}
//# sourceMappingURL=labelYearDropdown.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/selection/useMulti.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/selection/useMulti.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useMulti: () => (/* binding */ useMulti)
/* harmony export */ });
/* harmony import */ var _helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/useControlledValue.js */ "./node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js");

/**
 * Hook to manage multiple-date selection in the DayPicker component.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param dateLib - The date utility library instance.
 * @returns An object containing the selected dates, a function to select dates,
 *   and a function to check if a date is selected.
 */
function useMulti(props, dateLib) {
    const { selected: initiallySelected, required, onSelect } = props;
    const [internallySelected, setSelected] = (0,_helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_0__.useControlledValue)(initiallySelected, onSelect ? initiallySelected : undefined);
    const selected = !onSelect ? internallySelected : initiallySelected;
    const { isSameDay } = dateLib;
    const isSelected = (date) => {
        return selected?.some((d) => isSameDay(d, date)) ?? false;
    };
    const { min, max } = props;
    const select = (triggerDate, modifiers, e) => {
        let newDates = [...(selected ?? [])];
        if (isSelected(triggerDate)) {
            if (selected?.length === min) {
                // Min value reached, do nothing
                return;
            }
            if (required && selected?.length === 1) {
                // Required value already selected do nothing
                return;
            }
            newDates = selected?.filter((d) => !isSameDay(d, triggerDate));
        }
        else {
            if (selected?.length === max) {
                // Max value reached, reset the selection to date
                newDates = [triggerDate];
            }
            else {
                // Add the date to the selection
                newDates = [...newDates, triggerDate];
            }
        }
        if (!onSelect) {
            setSelected(newDates);
        }
        onSelect?.(newDates, triggerDate, modifiers, e);
        return newDates;
    };
    return {
        selected,
        select,
        isSelected
    };
}
//# sourceMappingURL=useMulti.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/selection/useRange.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/selection/useRange.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useRange: () => (/* binding */ useRange)
/* harmony export */ });
/* harmony import */ var _helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/useControlledValue.js */ "./node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js");
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/react-day-picker/dist/esm/utils/addToRange.js");
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeContainsModifiers.js");
/* harmony import */ var _utils_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/rangeIncludesDate.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js");



/**
 * Hook to manage range selection in the DayPicker component.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param dateLib - The date utility library instance.
 * @returns An object containing the selected range, a function to select a
 *   range, and a function to check if a date is within the range.
 */
function useRange(props, dateLib) {
    const { disabled, excludeDisabled, selected: initiallySelected, required, onSelect } = props;
    const [internallySelected, setSelected] = (0,_helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_0__.useControlledValue)(initiallySelected, onSelect ? initiallySelected : undefined);
    const selected = !onSelect ? internallySelected : initiallySelected;
    const isSelected = (date) => selected && (0,_utils_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_3__.rangeIncludesDate)(selected, date, false, dateLib);
    const select = (triggerDate, modifiers, e) => {
        const { min, max } = props;
        const newRange = triggerDate
            ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.addToRange)(triggerDate, selected, min, max, required, dateLib)
            : undefined;
        if (excludeDisabled && disabled && newRange?.from && newRange.to) {
            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.rangeContainsModifiers)({ from: newRange.from, to: newRange.to }, disabled, dateLib)) {
                // if a disabled days is found, the range is reset
                newRange.from = triggerDate;
                newRange.to = undefined;
            }
        }
        if (!onSelect) {
            setSelected(newRange);
        }
        onSelect?.(newRange, triggerDate, modifiers, e);
        return newRange;
    };
    return {
        selected,
        select,
        isSelected
    };
}
//# sourceMappingURL=useRange.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/selection/useSingle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/selection/useSingle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useSingle: () => (/* binding */ useSingle)
/* harmony export */ });
/* harmony import */ var _helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/useControlledValue.js */ "./node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js");

/**
 * Hook to manage single-date selection in the DayPicker component.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param dateLib - The date utility library instance.
 * @returns An object containing the selected date, a function to select a date,
 *   and a function to check if a date is selected.
 */
function useSingle(props, dateLib) {
    const { selected: initiallySelected, required, onSelect } = props;
    const [internallySelected, setSelected] = (0,_helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_0__.useControlledValue)(initiallySelected, onSelect ? initiallySelected : undefined);
    const selected = !onSelect ? internallySelected : initiallySelected;
    const { isSameDay } = dateLib;
    const isSelected = (compareDate) => {
        return selected ? isSameDay(selected, compareDate) : false;
    };
    const select = (triggerDate, modifiers, e) => {
        let newDate = triggerDate;
        if (!required && selected && selected && isSameDay(triggerDate, selected)) {
            // If the date is the same, clear the selection.
            newDate = undefined;
        }
        if (!onSelect) {
            setSelected(newDate);
        }
        if (required) {
            onSelect?.(newDate, triggerDate, modifiers, e);
        }
        else {
            onSelect?.(newDate, triggerDate, modifiers, e);
        }
        return newDate;
    };
    return {
        selected,
        select,
        isSelected
    };
}
//# sourceMappingURL=useSingle.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/useAnimation.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/useAnimation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useAnimation: () => (/* binding */ useAnimation)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UI.js */ "./node_modules/react-day-picker/dist/esm/UI.js");


const asHtmlElement = (element) => {
    if (element instanceof HTMLElement)
        return element;
    return null;
};
const queryMonthEls = (element) => [
    ...(element.querySelectorAll("[data-animated-month]") ?? [])
];
const queryMonthEl = (element) => asHtmlElement(element.querySelector("[data-animated-month]"));
const queryCaptionEl = (element) => asHtmlElement(element.querySelector("[data-animated-caption]"));
const queryWeeksEl = (element) => asHtmlElement(element.querySelector("[data-animated-weeks]"));
const queryNavEl = (element) => asHtmlElement(element.querySelector("[data-animated-nav]"));
const queryWeekdaysEl = (element) => asHtmlElement(element.querySelector("[data-animated-weekdays]"));
/**
 * Handles animations for transitioning between months in the DayPicker
 * component.
 *
 * @private
 * @param rootElRef - A reference to the root element of the DayPicker
 *   component.
 * @param enabled - Whether animations are enabled.
 * @param options - Configuration options for the animation, including class
 *   names, months, focused day, and the date utility library.
 */
function useAnimation(rootElRef, enabled, { classNames, months, focused, dateLib }) {
    const previousRootElSnapshotRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    const previousMonthsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(months);
    const animatingRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
        // get previous months before updating the previous months ref
        const previousMonths = previousMonthsRef.current;
        // update previous months ref for next effect trigger
        previousMonthsRef.current = months;
        if (!enabled ||
            !rootElRef.current ||
            // safety check because the ref can be set to anything by consumers
            !(rootElRef.current instanceof HTMLElement) ||
            // validation required for the animation to work as expected
            months.length === 0 ||
            previousMonths.length === 0 ||
            months.length !== previousMonths.length) {
            return;
        }
        const isSameMonth = dateLib.isSameMonth(months[0].date, previousMonths[0].date);
        const isAfterPreviousMonth = dateLib.isAfter(months[0].date, previousMonths[0].date);
        const captionAnimationClass = isAfterPreviousMonth
            ? classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.caption_after_enter]
            : classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.caption_before_enter];
        const weeksAnimationClass = isAfterPreviousMonth
            ? classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.weeks_after_enter]
            : classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.weeks_before_enter];
        // get previous root element snapshot before updating the snapshot ref
        const previousRootElSnapshot = previousRootElSnapshotRef.current;
        // update snapshot for next effect trigger
        const rootElSnapshot = rootElRef.current.cloneNode(true);
        if (rootElSnapshot instanceof HTMLElement) {
            // if this effect is triggered while animating, we need to clean up the new root snapshot
            // to put it in the same state as when not animating, to correctly animate the next month change
            const currentMonthElsSnapshot = queryMonthEls(rootElSnapshot);
            currentMonthElsSnapshot.forEach((currentMonthElSnapshot) => {
                if (!(currentMonthElSnapshot instanceof HTMLElement))
                    return;
                // remove the old month snapshots from the new root snapshot
                const previousMonthElSnapshot = queryMonthEl(currentMonthElSnapshot);
                if (previousMonthElSnapshot &&
                    currentMonthElSnapshot.contains(previousMonthElSnapshot)) {
                    currentMonthElSnapshot.removeChild(previousMonthElSnapshot);
                }
                // remove animation classes from the new month snapshots
                const captionEl = queryCaptionEl(currentMonthElSnapshot);
                if (captionEl) {
                    captionEl.classList.remove(captionAnimationClass);
                }
                const weeksEl = queryWeeksEl(currentMonthElSnapshot);
                if (weeksEl) {
                    weeksEl.classList.remove(weeksAnimationClass);
                }
            });
            previousRootElSnapshotRef.current = rootElSnapshot;
        }
        else {
            previousRootElSnapshotRef.current = null;
        }
        if (animatingRef.current ||
            isSameMonth ||
            // skip animation if a day is focused because it can cause issues to the animation and is better for a11y
            focused) {
            return;
        }
        const previousMonthEls = previousRootElSnapshot instanceof HTMLElement
            ? queryMonthEls(previousRootElSnapshot)
            : [];
        const currentMonthEls = queryMonthEls(rootElRef.current);
        if (currentMonthEls &&
            currentMonthEls.every((el) => el instanceof HTMLElement) &&
            previousMonthEls &&
            previousMonthEls.every((el) => el instanceof HTMLElement)) {
            animatingRef.current = true;
            const cleanUpFunctions = [];
            // set isolation to isolate to isolate the stacking context during animation
            rootElRef.current.style.isolation = "isolate";
            // set z-index to 1 to ensure the nav is clickable over the other elements being animated
            const navEl = queryNavEl(rootElRef.current);
            if (navEl) {
                navEl.style.zIndex = "1";
            }
            currentMonthEls.forEach((currentMonthEl, index) => {
                const previousMonthEl = previousMonthEls[index];
                if (!previousMonthEl) {
                    return;
                }
                // animate new displayed month
                currentMonthEl.style.position = "relative";
                currentMonthEl.style.overflow = "hidden";
                const captionEl = queryCaptionEl(currentMonthEl);
                if (captionEl) {
                    captionEl.classList.add(captionAnimationClass);
                }
                const weeksEl = queryWeeksEl(currentMonthEl);
                if (weeksEl) {
                    weeksEl.classList.add(weeksAnimationClass);
                }
                // animate new displayed month end
                const cleanUp = () => {
                    animatingRef.current = false;
                    if (rootElRef.current) {
                        rootElRef.current.style.isolation = "";
                    }
                    if (navEl) {
                        navEl.style.zIndex = "";
                    }
                    if (captionEl) {
                        captionEl.classList.remove(captionAnimationClass);
                    }
                    if (weeksEl) {
                        weeksEl.classList.remove(weeksAnimationClass);
                    }
                    currentMonthEl.style.position = "";
                    currentMonthEl.style.overflow = "";
                    if (currentMonthEl.contains(previousMonthEl)) {
                        currentMonthEl.removeChild(previousMonthEl);
                    }
                };
                cleanUpFunctions.push(cleanUp);
                // animate old displayed month
                previousMonthEl.style.pointerEvents = "none";
                previousMonthEl.style.position = "absolute";
                previousMonthEl.style.overflow = "hidden";
                previousMonthEl.setAttribute("aria-hidden", "true");
                // hide the weekdays container of the old month and only the new one
                const previousWeekdaysEl = queryWeekdaysEl(previousMonthEl);
                if (previousWeekdaysEl) {
                    previousWeekdaysEl.style.opacity = "0";
                }
                const previousCaptionEl = queryCaptionEl(previousMonthEl);
                if (previousCaptionEl) {
                    previousCaptionEl.classList.add(isAfterPreviousMonth
                        ? classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.caption_before_exit]
                        : classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.caption_after_exit]);
                    previousCaptionEl.addEventListener("animationend", cleanUp);
                }
                const previousWeeksEl = queryWeeksEl(previousMonthEl);
                if (previousWeeksEl) {
                    previousWeeksEl.classList.add(isAfterPreviousMonth
                        ? classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.weeks_before_exit]
                        : classNames[_UI_js__WEBPACK_IMPORTED_MODULE_1__.Animation.weeks_after_exit]);
                }
                currentMonthEl.insertBefore(previousMonthEl, currentMonthEl.firstChild);
            });
        }
    });
}
//# sourceMappingURL=useAnimation.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/useCalendar.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/useCalendar.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useCalendar: () => (/* binding */ useCalendar)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _helpers_getDates_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/getDates.js */ "./node_modules/react-day-picker/dist/esm/helpers/getDates.js");
/* harmony import */ var _helpers_getDays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/getDays.js */ "./node_modules/react-day-picker/dist/esm/helpers/getDays.js");
/* harmony import */ var _helpers_getDisplayMonths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/getDisplayMonths.js */ "./node_modules/react-day-picker/dist/esm/helpers/getDisplayMonths.js");
/* harmony import */ var _helpers_getInitialMonth_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/getInitialMonth.js */ "./node_modules/react-day-picker/dist/esm/helpers/getInitialMonth.js");
/* harmony import */ var _helpers_getMonths_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/getMonths.js */ "./node_modules/react-day-picker/dist/esm/helpers/getMonths.js");
/* harmony import */ var _helpers_getNavMonth_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/getNavMonth.js */ "./node_modules/react-day-picker/dist/esm/helpers/getNavMonth.js");
/* harmony import */ var _helpers_getNextMonth_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/getNextMonth.js */ "./node_modules/react-day-picker/dist/esm/helpers/getNextMonth.js");
/* harmony import */ var _helpers_getPreviousMonth_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers/getPreviousMonth.js */ "./node_modules/react-day-picker/dist/esm/helpers/getPreviousMonth.js");
/* harmony import */ var _helpers_getWeeks_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/getWeeks.js */ "./node_modules/react-day-picker/dist/esm/helpers/getWeeks.js");
/* harmony import */ var _helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/useControlledValue.js */ "./node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js");











/**
 * Provides the calendar object to work with the calendar in custom components.
 *
 * @private
 * @param props - The DayPicker props related to calendar configuration.
 * @param dateLib - The date utility library instance.
 * @returns The calendar object containing displayed days, weeks, months, and
 *   navigation methods.
 */
function useCalendar(props, dateLib) {
    const [navStart, navEnd] = (0,_helpers_getNavMonth_js__WEBPACK_IMPORTED_MODULE_6__.getNavMonths)(props, dateLib);
    const { startOfMonth, endOfMonth } = dateLib;
    const initialMonth = (0,_helpers_getInitialMonth_js__WEBPACK_IMPORTED_MODULE_4__.getInitialMonth)(props, navStart, navEnd, dateLib);
    const [firstMonth, setFirstMonth] = (0,_helpers_useControlledValue_js__WEBPACK_IMPORTED_MODULE_10__.useControlledValue)(initialMonth, 
    // initialMonth is always computed from props.month if provided
    props.month ? initialMonth : undefined);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        const newInitialMonth = (0,_helpers_getInitialMonth_js__WEBPACK_IMPORTED_MODULE_4__.getInitialMonth)(props, navStart, navEnd, dateLib);
        setFirstMonth(newInitialMonth);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [props.timeZone]);
    /** The months displayed in the calendar. */
    const displayMonths = (0,_helpers_getDisplayMonths_js__WEBPACK_IMPORTED_MODULE_3__.getDisplayMonths)(firstMonth, navEnd, props, dateLib);
    /** The dates displayed in the calendar. */
    const dates = (0,_helpers_getDates_js__WEBPACK_IMPORTED_MODULE_1__.getDates)(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);
    /** The Months displayed in the calendar. */
    const months = (0,_helpers_getMonths_js__WEBPACK_IMPORTED_MODULE_5__.getMonths)(displayMonths, dates, props, dateLib);
    /** The Weeks displayed in the calendar. */
    const weeks = (0,_helpers_getWeeks_js__WEBPACK_IMPORTED_MODULE_9__.getWeeks)(months);
    /** The Days displayed in the calendar. */
    const days = (0,_helpers_getDays_js__WEBPACK_IMPORTED_MODULE_2__.getDays)(months);
    const previousMonth = (0,_helpers_getPreviousMonth_js__WEBPACK_IMPORTED_MODULE_8__.getPreviousMonth)(firstMonth, navStart, props, dateLib);
    const nextMonth = (0,_helpers_getNextMonth_js__WEBPACK_IMPORTED_MODULE_7__.getNextMonth)(firstMonth, navEnd, props, dateLib);
    const { disableNavigation, onMonthChange } = props;
    const isDayInCalendar = (day) => weeks.some((week) => week.days.some((d) => d.isEqualTo(day)));
    const goToMonth = (date) => {
        if (disableNavigation) {
            return;
        }
        let newMonth = startOfMonth(date);
        // if month is before start, use the first month instead
        if (navStart && newMonth < startOfMonth(navStart)) {
            newMonth = startOfMonth(navStart);
        }
        // if month is after endMonth, use the last month instead
        if (navEnd && newMonth > startOfMonth(navEnd)) {
            newMonth = startOfMonth(navEnd);
        }
        setFirstMonth(newMonth);
        onMonthChange?.(newMonth);
    };
    const goToDay = (day) => {
        // is this check necessary?
        if (isDayInCalendar(day)) {
            return;
        }
        goToMonth(day.date);
    };
    const calendar = {
        months,
        weeks,
        days,
        navStart,
        navEnd,
        previousMonth,
        nextMonth,
        goToMonth,
        goToDay
    };
    return calendar;
}
//# sourceMappingURL=useCalendar.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/useDayPicker.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/useDayPicker.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dayPickerContext: () => (/* binding */ dayPickerContext),
/* harmony export */   useDayPicker: () => (/* binding */ useDayPicker)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");

/** @ignore */
const dayPickerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);
/**
 * Provides access to the DayPicker context, which includes properties and
 * methods to interact with the DayPicker component. This hook must be used
 * within a custom component.
 *
 * @template T - Use this type to refine the returned context type with a
 *   specific selection mode.
 * @returns The context to work with DayPicker.
 * @throws {Error} If the hook is used outside of a DayPicker provider.
 * @group Hooks
 * @see https://daypicker.dev/guides/custom-components
 */
function useDayPicker() {
    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(dayPickerContext);
    if (context === undefined) {
        throw new Error("useDayPicker() must be used within a custom component.");
    }
    return context;
}
//# sourceMappingURL=useDayPicker.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/useFocus.js":
/*!************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/useFocus.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useFocus: () => (/* binding */ useFocus)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var _helpers_calculateFocusTarget_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/calculateFocusTarget.js */ "./node_modules/react-day-picker/dist/esm/helpers/calculateFocusTarget.js");
/* harmony import */ var _helpers_getNextFocus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/getNextFocus.js */ "./node_modules/react-day-picker/dist/esm/helpers/getNextFocus.js");



/**
 * Manages focus behavior for the DayPicker component, including setting,
 * moving, and blurring focus on calendar days.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param calendar - The calendar object containing the displayed days and
 *   months.
 * @param getModifiers - A function to retrieve modifiers for a given day.
 * @param isSelected - A function to check if a date is selected.
 * @param dateLib - The date utility library instance.
 * @returns An object containing focus-related methods and the currently focused
 *   day.
 */
function useFocus(props, calendar, getModifiers, isSelected, dateLib) {
    const { autoFocus } = props;
    const [lastFocused, setLastFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const focusTarget = (0,_helpers_calculateFocusTarget_js__WEBPACK_IMPORTED_MODULE_1__.calculateFocusTarget)(calendar.days, getModifiers, isSelected || (() => false), lastFocused);
    const [focusedDay, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(autoFocus ? focusTarget : undefined);
    const blur = () => {
        setLastFocused(focusedDay);
        setFocused(undefined);
    };
    const moveFocus = (moveBy, moveDir) => {
        if (!focusedDay)
            return;
        const nextFocus = (0,_helpers_getNextFocus_js__WEBPACK_IMPORTED_MODULE_2__.getNextFocus)(moveBy, moveDir, focusedDay, calendar.navStart, calendar.navEnd, props, dateLib);
        if (!nextFocus)
            return;
        calendar.goToDay(nextFocus);
        setFocused(nextFocus);
    };
    const isFocusTarget = (day) => {
        return Boolean(focusTarget?.isEqualTo(day));
    };
    const useFocus = {
        isFocusTarget,
        setFocused,
        focused: focusedDay,
        blur,
        moveFocus
    };
    return useFocus;
}
//# sourceMappingURL=useFocus.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/useSelection.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/useSelection.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useSelection: () => (/* binding */ useSelection)
/* harmony export */ });
/* harmony import */ var _selection_useMulti_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/useMulti.js */ "./node_modules/react-day-picker/dist/esm/selection/useMulti.js");
/* harmony import */ var _selection_useRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selection/useRange.js */ "./node_modules/react-day-picker/dist/esm/selection/useRange.js");
/* harmony import */ var _selection_useSingle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selection/useSingle.js */ "./node_modules/react-day-picker/dist/esm/selection/useSingle.js");



/**
 * Determines the appropriate selection hook to use based on the selection mode
 * and returns the corresponding selection object.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param dateLib - The date utility library instance.
 * @returns The selection object for the specified mode, or `undefined` if no
 *   mode is set.
 */
function useSelection(props, dateLib) {
    const single = (0,_selection_useSingle_js__WEBPACK_IMPORTED_MODULE_2__.useSingle)(props, dateLib);
    const multi = (0,_selection_useMulti_js__WEBPACK_IMPORTED_MODULE_0__.useMulti)(props, dateLib);
    const range = (0,_selection_useRange_js__WEBPACK_IMPORTED_MODULE_1__.useRange)(props, dateLib);
    switch (props.mode) {
        case "single":
            return single;
        case "multiple":
            return multi;
        case "range":
            return range;
        default:
            return undefined;
    }
}
//# sourceMappingURL=useSelection.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/addToRange.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/addToRange.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addToRange: () => (/* binding */ addToRange)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Adds a date to an existing range, considering constraints like minimum and
 * maximum range size.
 *
 * @param date - The date to add to the range.
 * @param initialRange - The initial range to which the date will be added.
 * @param min - The minimum number of days in the range.
 * @param max - The maximum number of days in the range.
 * @param required - Whether the range must always include at least one date.
 * @param dateLib - The date utility library instance.
 * @returns The updated date range, or `undefined` if the range is cleared.
 * @group Utilities
 */
function addToRange(date, initialRange, min = 0, max = 0, required = false, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    const { from, to } = initialRange || {};
    const { isSameDay, isAfter, isBefore } = dateLib;
    let range;
    if (!from && !to) {
        // the range is empty, add the date
        range = { from: date, to: min > 0 ? undefined : date };
    }
    else if (from && !to) {
        // adding date to an incomplete range
        if (isSameDay(from, date)) {
            // adding a date equal to the start of the range
            if (required) {
                range = { from, to: undefined };
            }
            else {
                range = undefined;
            }
        }
        else if (isBefore(date, from)) {
            // adding a date before the start of the range
            range = { from: date, to: from };
        }
        else {
            // adding a date after the start of the range
            range = { from, to: date };
        }
    }
    else if (from && to) {
        // adding date to a complete range
        if (isSameDay(from, date) && isSameDay(to, date)) {
            // adding a date that is equal to both start and end of the range
            if (required) {
                range = { from, to };
            }
            else {
                range = undefined;
            }
        }
        else if (isSameDay(from, date)) {
            // adding a date equal to the the start of the range
            range = { from, to: min > 0 ? undefined : date };
        }
        else if (isSameDay(to, date)) {
            // adding a dare equal to the end of the range
            range = { from: date, to: min > 0 ? undefined : date };
        }
        else if (isBefore(date, from)) {
            // adding a date before the start of the range
            range = { from: date, to: to };
        }
        else if (isAfter(date, from)) {
            // adding a date after the start of the range
            range = { from, to: date };
        }
        else if (isAfter(date, to)) {
            // adding a date after the end of the range
            range = { from, to: date };
        }
        else {
            throw new Error("Invalid range");
        }
    }
    // check for min / max
    if (range?.from && range?.to) {
        const diff = dateLib.differenceInCalendarDays(range.to, range.from);
        if (max > 0 && diff > max) {
            range = { from: date, to: undefined };
        }
        else if (min > 1 && diff < min) {
            range = { from: date, to: undefined };
        }
    }
    return range;
}
//# sourceMappingURL=addToRange.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dateMatchModifiers: () => (/* binding */ dateMatchModifiers),
/* harmony export */   isMatch: () => (/* binding */ isMatch)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");
/* harmony import */ var _rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rangeIncludesDate.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js");
/* harmony import */ var _typeguards_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./typeguards.js */ "./node_modules/react-day-picker/dist/esm/utils/typeguards.js");



/**
 * Checks if a given date matches at least one of the specified {@link Matcher}.
 *
 * @param date - The date to check.
 * @param matchers - The matchers to check against.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the date matches any of the matchers, otherwise `false`.
 * @group Utilities
 */
function dateMatchModifiers(date, matchers, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    const matchersArr = !Array.isArray(matchers) ? [matchers] : matchers;
    const { isSameDay, differenceInCalendarDays, isAfter } = dateLib;
    return matchersArr.some((matcher) => {
        if (typeof matcher === "boolean") {
            return matcher;
        }
        if (dateLib.isDate(matcher)) {
            return isSameDay(date, matcher);
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_2__.isDatesArray)(matcher, dateLib)) {
            return matcher.includes(date);
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_2__.isDateRange)(matcher)) {
            return (0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__.rangeIncludesDate)(matcher, date, false, dateLib);
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_2__.isDayOfWeekType)(matcher)) {
            if (!Array.isArray(matcher.dayOfWeek)) {
                return matcher.dayOfWeek === date.getDay();
            }
            return matcher.dayOfWeek.includes(date.getDay());
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_2__.isDateInterval)(matcher)) {
            const diffBefore = differenceInCalendarDays(matcher.before, date);
            const diffAfter = differenceInCalendarDays(matcher.after, date);
            const isDayBefore = diffBefore > 0;
            const isDayAfter = diffAfter < 0;
            const isClosedInterval = isAfter(matcher.before, matcher.after);
            if (isClosedInterval) {
                return isDayAfter && isDayBefore;
            }
            else {
                return isDayBefore || isDayAfter;
            }
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_2__.isDateAfterType)(matcher)) {
            return differenceInCalendarDays(date, matcher.after) > 0;
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_2__.isDateBeforeType)(matcher)) {
            return differenceInCalendarDays(matcher.before, date) > 0;
        }
        if (typeof matcher === "function") {
            return matcher(date);
        }
        return false;
    });
}
/**
 * @private
 * @deprecated Use {@link dateMatchModifiers} instead.
 */
const isMatch = dateMatchModifiers;
//# sourceMappingURL=dateMatchModifiers.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/rangeContainsDayOfWeek.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/rangeContainsDayOfWeek.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rangeContainsDayOfWeek: () => (/* binding */ rangeContainsDayOfWeek)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Checks if a date range contains one or more specified days of the week.
 *
 * @since 9.2.2
 * @param range - The date range to check.
 * @param dayOfWeek - The day(s) of the week to check for (`0-6`, where `0` is
 *   Sunday).
 * @param dateLib - The date utility library instance.
 * @returns `true` if the range contains the specified day(s) of the week,
 *   otherwise `false`.
 * @group Utilities
 */
function rangeContainsDayOfWeek(range, dayOfWeek, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    const dayOfWeekArr = !Array.isArray(dayOfWeek) ? [dayOfWeek] : dayOfWeek;
    let date = range.from;
    const totalDays = dateLib.differenceInCalendarDays(range.to, range.from);
    // iterate at maximum one week or the total days if the range is shorter than one week
    const totalDaysLimit = Math.min(totalDays, 6);
    for (let i = 0; i <= totalDaysLimit; i++) {
        if (dayOfWeekArr.includes(date.getDay())) {
            return true;
        }
        date = dateLib.addDays(date, 1);
    }
    return false;
}
//# sourceMappingURL=rangeContainsDayOfWeek.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/rangeContainsModifiers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/rangeContainsModifiers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rangeContainsModifiers: () => (/* binding */ rangeContainsModifiers)
/* harmony export */ });
/* harmony import */ var _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/DateLib.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");
/* harmony import */ var _dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dateMatchModifiers.js */ "./node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js");
/* harmony import */ var _rangeContainsDayOfWeek_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rangeContainsDayOfWeek.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeContainsDayOfWeek.js");
/* harmony import */ var _rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rangeIncludesDate.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js");
/* harmony import */ var _rangeOverlaps_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rangeOverlaps.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeOverlaps.js");
/* harmony import */ var _typeguards_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeguards.js */ "./node_modules/react-day-picker/dist/esm/utils/typeguards.js");






/**
 * Checks if a date range contains dates that match the given modifiers.
 *
 * @since 9.2.2
 * @param range - The date range to check.
 * @param modifiers - The modifiers to match against.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the range contains matching dates, otherwise `false`.
 * @group Utilities
 */
function rangeContainsModifiers(range, modifiers, dateLib = _classes_DateLib_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    const matchers = Array.isArray(modifiers) ? modifiers : [modifiers];
    // Defer function matchers evaluation as they are the least performant.
    const nonFunctionMatchers = matchers.filter((matcher) => typeof matcher !== "function");
    const nonFunctionMatchersResult = nonFunctionMatchers.some((matcher) => {
        if (typeof matcher === "boolean")
            return matcher;
        if (dateLib.isDate(matcher)) {
            return (0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_3__.rangeIncludesDate)(range, matcher, false, dateLib);
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_5__.isDatesArray)(matcher, dateLib)) {
            return matcher.some((date) => (0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_3__.rangeIncludesDate)(range, date, false, dateLib));
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_5__.isDateRange)(matcher)) {
            if (matcher.from && matcher.to) {
                return (0,_rangeOverlaps_js__WEBPACK_IMPORTED_MODULE_4__.rangeOverlaps)(range, { from: matcher.from, to: matcher.to }, dateLib);
            }
            return false;
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_5__.isDayOfWeekType)(matcher)) {
            return (0,_rangeContainsDayOfWeek_js__WEBPACK_IMPORTED_MODULE_2__.rangeContainsDayOfWeek)(range, matcher.dayOfWeek, dateLib);
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_5__.isDateInterval)(matcher)) {
            const isClosedInterval = dateLib.isAfter(matcher.before, matcher.after);
            if (isClosedInterval) {
                return (0,_rangeOverlaps_js__WEBPACK_IMPORTED_MODULE_4__.rangeOverlaps)(range, {
                    from: dateLib.addDays(matcher.after, 1),
                    to: dateLib.addDays(matcher.before, -1)
                }, dateLib);
            }
            return ((0,_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(range.from, matcher, dateLib) ||
                (0,_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(range.to, matcher, dateLib));
        }
        if ((0,_typeguards_js__WEBPACK_IMPORTED_MODULE_5__.isDateAfterType)(matcher) || (0,_typeguards_js__WEBPACK_IMPORTED_MODULE_5__.isDateBeforeType)(matcher)) {
            return ((0,_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(range.from, matcher, dateLib) ||
                (0,_dateMatchModifiers_js__WEBPACK_IMPORTED_MODULE_1__.dateMatchModifiers)(range.to, matcher, dateLib));
        }
        return false;
    });
    if (nonFunctionMatchersResult) {
        return true;
    }
    const functionMatchers = matchers.filter((matcher) => typeof matcher === "function");
    if (functionMatchers.length) {
        let date = range.from;
        const totalDays = dateLib.differenceInCalendarDays(range.to, range.from);
        for (let i = 0; i <= totalDays; i++) {
            if (functionMatchers.some((matcher) => matcher(date))) {
                return true;
            }
            date = dateLib.addDays(date, 1);
        }
    }
    return false;
}
//# sourceMappingURL=rangeContainsModifiers.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isDateInRange: () => (/* binding */ isDateInRange),
/* harmony export */   rangeIncludesDate: () => (/* binding */ rangeIncludesDate)
/* harmony export */ });
/* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/index.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");

/**
 * Checks if a given date is within a specified date range.
 *
 * @since 9.0.0
 * @param range - The date range to check against.
 * @param date - The date to check.
 * @param excludeEnds - If `true`, the range's start and end dates are excluded.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the date is within the range, otherwise `false`.
 * @group Utilities
 */
function rangeIncludesDate(range, date, excludeEnds = false, dateLib = _classes_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    let { from, to } = range;
    const { differenceInCalendarDays, isSameDay } = dateLib;
    if (from && to) {
        const isRangeInverted = differenceInCalendarDays(to, from) < 0;
        if (isRangeInverted) {
            [from, to] = [to, from];
        }
        const isInRange = differenceInCalendarDays(date, from) >= (excludeEnds ? 1 : 0) &&
            differenceInCalendarDays(to, date) >= (excludeEnds ? 1 : 0);
        return isInRange;
    }
    if (!excludeEnds && to) {
        return isSameDay(to, date);
    }
    if (!excludeEnds && from) {
        return isSameDay(from, date);
    }
    return false;
}
/**
 * @private
 * @deprecated Use {@link rangeIncludesDate} instead.
 */
const isDateInRange = (range, date) => rangeIncludesDate(range, date, false, _classes_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib);
//# sourceMappingURL=rangeIncludesDate.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/rangeOverlaps.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/rangeOverlaps.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rangeOverlaps: () => (/* binding */ rangeOverlaps)
/* harmony export */ });
/* harmony import */ var _classes_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/index.js */ "./node_modules/react-day-picker/dist/esm/classes/DateLib.js");
/* harmony import */ var _rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rangeIncludesDate.js */ "./node_modules/react-day-picker/dist/esm/utils/rangeIncludesDate.js");


/**
 * Determines if two date ranges overlap.
 *
 * @since 9.2.2
 * @param rangeLeft - The first date range.
 * @param rangeRight - The second date range.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the ranges overlap, otherwise `false`.
 * @group Utilities
 */
function rangeOverlaps(rangeLeft, rangeRight, dateLib = _classes_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultDateLib) {
    return ((0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__.rangeIncludesDate)(rangeLeft, rangeRight.from, false, dateLib) ||
        (0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__.rangeIncludesDate)(rangeLeft, rangeRight.to, false, dateLib) ||
        (0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__.rangeIncludesDate)(rangeRight, rangeLeft.from, false, dateLib) ||
        (0,_rangeIncludesDate_js__WEBPACK_IMPORTED_MODULE_1__.rangeIncludesDate)(rangeRight, rangeLeft.to, false, dateLib));
}
//# sourceMappingURL=rangeOverlaps.js.map

/***/ }),

/***/ "./node_modules/react-day-picker/dist/esm/utils/typeguards.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-day-picker/dist/esm/utils/typeguards.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isDateAfterType: () => (/* binding */ isDateAfterType),
/* harmony export */   isDateBeforeType: () => (/* binding */ isDateBeforeType),
/* harmony export */   isDateInterval: () => (/* binding */ isDateInterval),
/* harmony export */   isDateRange: () => (/* binding */ isDateRange),
/* harmony export */   isDatesArray: () => (/* binding */ isDatesArray),
/* harmony export */   isDayOfWeekType: () => (/* binding */ isDayOfWeekType)
/* harmony export */ });
/**
 * Checks if the given value is of type {@link DateInterval}.
 *
 * @param matcher - The value to check.
 * @returns `true` if the value is a {@link DateInterval}, otherwise `false`.
 * @group Utilities
 */
function isDateInterval(matcher) {
    return Boolean(matcher &&
        typeof matcher === "object" &&
        "before" in matcher &&
        "after" in matcher);
}
/**
 * Checks if the given value is of type {@link DateRange}.
 *
 * @param value - The value to check.
 * @returns `true` if the value is a {@link DateRange}, otherwise `false`.
 * @group Utilities
 */
function isDateRange(value) {
    return Boolean(value && typeof value === "object" && "from" in value);
}
/**
 * Checks if the given value is of type {@link DateAfter}.
 *
 * @param value - The value to check.
 * @returns `true` if the value is a {@link DateAfter}, otherwise `false`.
 * @group Utilities
 */
function isDateAfterType(value) {
    return Boolean(value && typeof value === "object" && "after" in value);
}
/**
 * Checks if the given value is of type {@link DateBefore}.
 *
 * @param value - The value to check.
 * @returns `true` if the value is a {@link DateBefore}, otherwise `false`.
 * @group Utilities
 */
function isDateBeforeType(value) {
    return Boolean(value && typeof value === "object" && "before" in value);
}
/**
 * Checks if the given value is of type {@link DayOfWeek}.
 *
 * @param value - The value to check.
 * @returns `true` if the value is a {@link DayOfWeek}, otherwise `false`.
 * @group Utilities
 */
function isDayOfWeekType(value) {
    return Boolean(value && typeof value === "object" && "dayOfWeek" in value);
}
/**
 * Checks if the given value is an array of valid dates.
 *
 * @private
 * @param value - The value to check.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the value is an array of valid dates, otherwise `false`.
 */
function isDatesArray(value, dateLib) {
    return Array.isArray(value) && value.every(dateLib.isDate);
}
//# sourceMappingURL=typeguards.js.map

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_lucide-react_dist_esm_icons_calendar_js-node_modules_lucide-react_dist_e-4dbed2.js.map